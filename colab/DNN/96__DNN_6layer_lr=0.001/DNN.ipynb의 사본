{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DNN.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOaH8MdVrsGMvG2VO1Cz1CK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Nz7zDemgQM5m","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599540472417,"user_tz":-540,"elapsed":1454,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"20b83191-417d-4f42-fd23-866979d62f31"},"source":["%pwd"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"1CAUBQkGQ_b5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":131},"executionInfo":{"status":"ok","timestamp":1599540499271,"user_tz":-540,"elapsed":24779,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"36629912-29e7-4765-8905-2b8cc73279cd"},"source":["from google.colab import drive\n","drive.mount('../content/drive', force_remount=True)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at ../content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oFfFh2VA1UvB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599540503891,"user_tz":-540,"elapsed":1204,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"33501141-cc8b-4cac-aac9-2469407b546a"},"source":["cd ../content/drive/My Drive/Pytorch/DNN"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Pytorch/DNN\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P8k_tmSQREIi","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540510221,"user_tz":-540,"elapsed":5374,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' import libraries '''\n","\n","%matplotlib inline\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision.transforms import transforms  # 1 batch = (1, 784)\n","from torchvision.datasets import MNIST\n","from torch.autograd import Variable\n","from torch.utils.data.dataloader import DataLoader\n","from matplotlib import pyplot as plt\n","import numpy as np\n","from torchsummary import summary"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"HL3wzFYATEGN","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540515774,"user_tz":-540,"elapsed":5955,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' data load '''\n","download_root = '../data'\n","# Normalize data with mean=0.5, std=1.0\n","mnist_transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5,), (1.0,))\n","])\n","\n","# 60000 if train=True, 60000. else 10000.\n","train_data = MNIST(download_root, transform=mnist_transform, train=True, download=True)\n","test_data = MNIST(download_root, transform=mnist_transform, train=False, download=True)\n","\n","# 위 데이터를 batch size로 나눴구나\n","batch_size = 50\n","# 938 = int(60000/batch_size)\n","train_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True)\n","test_loader = DataLoader(dataset=test_data, batch_size=batch_size, shuffle=True)\n","\n","# if you wanna pick one sample\n","# example_mini_batch_img, example_mini_batch_label  = next(iter(train_loader))\n","# print(example_mini_batch_img.shape)  # torch.Size([batch_size, 1, 28, 28])"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"W5nQY_IAS-tH","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540522830,"user_tz":-540,"elapsed":1125,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' Build Network, 6 layer DNN '''\n","class DNN_Net(nn.Module):\n","    def __init__(self):\n","        super(DNN_Net, self).__init__()\n","        self.fc1 = nn.Linear(784, 512)  # default, bias=True\n","        self.fc2 = nn.Linear(512, 256)\n","        self.fc3 = nn.Linear(256, 128)\n","        self.fc4 = nn.Linear(128, 64)\n","        self.fc5 = nn.Linear(64, 32)\n","        self.fc6 = nn.Linear(32, 10)  # output = 10\n","\n","    def forward(self, x):\n","        x = x.float()\n","        h1 = F.relu(self.fc1(x.view(-1, 784)))  # push reshape input\n","        h2 = F.relu(self.fc2(h1))\n","        h3 = F.relu(self.fc3(h2))\n","        h4 = F.relu(self.fc4(h3))\n","        h5 = F.relu(self.fc5(h4))\n","        output = F.log_softmax(self.fc6(h5), dim=1)  # softmax\n","\n","        return output"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"bkn6D2YBTIrt","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599541556534,"user_tz":-540,"elapsed":1060,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' hyper parameters '''\n","# total_batch_num = int(len(train_data) / batch_size)\n","epochs = 20\n","lr = 0.001\n","momentum = 0.5\n","print_interval = 100\n","\n","# model, optimizer 초기화\n","model = DNN_Net()  # train 코드에서 모듈 model 호출될 때마다 forward 자동 실행!\n","optimizer = optim.Adam(model.parameters(), lr=lr)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"hqqquQIATbnd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":372},"executionInfo":{"status":"ok","timestamp":1599540542493,"user_tz":-540,"elapsed":11177,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"bede206a-6cfe-40f8-b82a-19fac6753f4b"},"source":["summary(model,(50, 1, 28, 28))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Linear-1                  [-1, 512]         401,920\n","            Linear-2                  [-1, 256]         131,328\n","            Linear-3                  [-1, 128]          32,896\n","            Linear-4                   [-1, 64]           8,256\n","            Linear-5                   [-1, 32]           2,080\n","            Linear-6                   [-1, 10]             330\n","================================================================\n","Total params: 576,810\n","Trainable params: 576,810\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.15\n","Forward/backward pass size (MB): 0.01\n","Params size (MB): 2.20\n","Estimated Total Size (MB): 2.36\n","----------------------------------------------------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PbtWJOqpxMWa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1599541563537,"user_tz":-540,"elapsed":1117,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"d3cd6129-e08e-4116-da52-c6d97a052210"},"source":["# 모델의 state_dict 출력\n","for param_tensor in model.state_dict():\n","    print(param_tensor, \"\\t\", model.state_dict()[param_tensor].size())\n","    # model.state_dict()[param_tensor].dat => 접근가능하네!\n","# 옵티마이저의 state_dict 출력\n","print(\"Optimizer's state_dict:\")\n","for var_name in optimizer.state_dict():\n","    print(var_name, \"\\t\", optimizer.state_dict()[var_name])"],"execution_count":13,"outputs":[{"output_type":"stream","text":["fc1.weight \t torch.Size([512, 784])\n","fc1.bias \t torch.Size([512])\n","fc2.weight \t torch.Size([256, 512])\n","fc2.bias \t torch.Size([256])\n","fc3.weight \t torch.Size([128, 256])\n","fc3.bias \t torch.Size([128])\n","fc4.weight \t torch.Size([64, 128])\n","fc4.bias \t torch.Size([64])\n","fc5.weight \t torch.Size([32, 64])\n","fc5.bias \t torch.Size([32])\n","fc6.weight \t torch.Size([10, 32])\n","fc6.bias \t torch.Size([10])\n","Optimizer's state_dict:\n","state \t {}\n","param_groups \t [{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iDdPXxZ5TMM9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599542160911,"user_tz":-540,"elapsed":596678,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"7ddfeb8b-1779-4bd8-bee4-dc3ff3a7da4a"},"source":["# 통일성 있게 코드 짜자.\n","train_epoch_loss = []\n","train_epoch_acc = []\n","test_epoch_loss = []\n","test_epoch_acc = []\n","\n","for epoch in range(epochs):\n","\n","    ''' Train '''\n","    model.train()\n","    train_batch_loss = []\n","    train_batch_acc = []\n","    train_batch_num = len(train_loader)\n","    print(\"train_batch_num: \", train_batch_num)\n","    for batch_idx, (x, target) in enumerate(train_loader):\n","        if batch_idx == 0:\n","            print('x.shape', x.shape, 'target.shape', target.shape)  # torch.Size([64, 1, 28, 28]) torch.Size([64])\n","            print(len(train_loader.dataset))  # 60000\n","\n","        x, target = Variable(x), Variable(target)\n","        optimizer.zero_grad()\n","        output = model(x)\n","        loss = F.nll_loss(output, target)\n","        loss.backward()    # calc gradients\n","        train_batch_loss.append(loss.item()/batch_size*100) # from tensor -> get value loss.item() or loss.data\n","        optimizer.step()   # update gradients\n","        prediction = output.argmax(dim=1, keepdims=True)\n","        accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","        train_batch_acc.append(accuracy)\n","        if batch_idx % print_interval == 0:\n","            print('epoch: {}\\tbatch Step: {}\\tLoss: {:.3f}\\tAccuracy: {:.3f}'.format(\n","                    epoch, batch_idx, train_batch_loss[batch_idx], train_batch_acc[batch_idx]))\n","\n","    train_epoch_loss.append(np.sum(train_batch_loss)/train_batch_num)\n","    train_epoch_acc.append(np.sum(train_batch_acc)/train_batch_num)\n","\n","\n","    ''' Test '''\n","    model.eval()\n","    test_batch_loss = []\n","    test_batch_acc = []\n","    test_batch_num = len(test_loader)\n","\n","    with torch.no_grad():\n","        for batch_idx, (x, target) in enumerate(test_loader):\n","\n","            x, target = Variable(x), Variable(target)\n","            output = model(x)\n","            test_batch_loss.append(loss.item()/batch_size*100)\n","            prediction = output.argmax(dim=1, keepdims=True)\n","            accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","            test_batch_acc.append(accuracy)\n","\n","    test_epoch_loss.append(np.sum(test_batch_loss)/test_batch_num)\n","    test_epoch_acc.append(np.sum(test_batch_acc)/test_batch_num)\n","\n","\n","''' save results to numpy '''\n","train_test_result = (train_epoch_loss, test_epoch_loss, train_epoch_acc, test_epoch_acc)\n","np.save(\"result.npy\", train_test_result)\n","\n","print(\"==================================\")\n","print(\"train_epoch_loss:\", train_epoch_loss)\n","print(\"test_epoch_loss:\", test_epoch_loss)\n","print(\"train_epoch_acc\", train_epoch_acc)\n","print(\"test_epoch_acc\", train_epoch_acc)\n","print(\"==================================\")\n","x = np.arange(start=1, stop=len(train_epoch_loss)+1, step=1)\n","\n","fig = plt.figure(figsize=(12, 3))\n","ax1 = fig.add_subplot(1, 2, 1)\n","plt.plot(x, train_epoch_loss, label='train')\n","plt.plot(x, test_epoch_loss, label='test')\n","ax1.legend()\n","ax1.set(ylabel=\"Loss\", xlabel='epoch')\n","\n","ax2 = fig.add_subplot(1, 2, 2)\n","plt.plot(x, train_epoch_acc, label='train')\n","plt.plot(x, test_epoch_acc, label='test')\n","ax2.legend()\n","ax2.set(ylabel=\"Accuracy\", xlabel='epoch')\n","\n","plt.show()\n","\n","# ''' inference를 위한 모델 저장  '''\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./DNN\"\n","option = 2\n","\n","if option == 0:\n","    model_path = model_name + '_all.pt'\n","    torch.save(model, model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    torch.save(model.state_dict, model_path)\n","\n","elif option == 2:\n","    model_path = model_name + '_ckp.tar'\n","    torch.save({\n","            'last_epoch': epochs -1,\n","            'model_state_dict': model.state_dict(),\n","            'optimizer_state_dict': optimizer.state_dict(),\n","            'loss': loss,\n","            }, model_path)\n","    "],"execution_count":14,"outputs":[{"output_type":"stream","text":["train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 0\tbatch Step: 0\tLoss: 4.617\tAccuracy: 14.000\n","epoch: 0\tbatch Step: 100\tLoss: 1.473\tAccuracy: 72.000\n","epoch: 0\tbatch Step: 200\tLoss: 1.185\tAccuracy: 84.000\n","epoch: 0\tbatch Step: 300\tLoss: 0.727\tAccuracy: 86.000\n","epoch: 0\tbatch Step: 400\tLoss: 0.760\tAccuracy: 86.000\n","epoch: 0\tbatch Step: 500\tLoss: 0.517\tAccuracy: 88.000\n","epoch: 0\tbatch Step: 600\tLoss: 0.489\tAccuracy: 96.000\n","epoch: 0\tbatch Step: 700\tLoss: 0.515\tAccuracy: 90.000\n","epoch: 0\tbatch Step: 800\tLoss: 0.467\tAccuracy: 92.000\n","epoch: 0\tbatch Step: 900\tLoss: 0.825\tAccuracy: 86.000\n","epoch: 0\tbatch Step: 1000\tLoss: 0.278\tAccuracy: 96.000\n","epoch: 0\tbatch Step: 1100\tLoss: 0.493\tAccuracy: 92.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 1\tbatch Step: 0\tLoss: 0.662\tAccuracy: 88.000\n","epoch: 1\tbatch Step: 100\tLoss: 0.616\tAccuracy: 90.000\n","epoch: 1\tbatch Step: 200\tLoss: 0.264\tAccuracy: 98.000\n","epoch: 1\tbatch Step: 300\tLoss: 0.769\tAccuracy: 90.000\n","epoch: 1\tbatch Step: 400\tLoss: 0.547\tAccuracy: 88.000\n","epoch: 1\tbatch Step: 500\tLoss: 0.408\tAccuracy: 92.000\n","epoch: 1\tbatch Step: 600\tLoss: 0.445\tAccuracy: 92.000\n","epoch: 1\tbatch Step: 700\tLoss: 0.463\tAccuracy: 92.000\n","epoch: 1\tbatch Step: 800\tLoss: 0.137\tAccuracy: 98.000\n","epoch: 1\tbatch Step: 900\tLoss: 0.182\tAccuracy: 96.000\n","epoch: 1\tbatch Step: 1000\tLoss: 0.084\tAccuracy: 98.000\n","epoch: 1\tbatch Step: 1100\tLoss: 0.551\tAccuracy: 92.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 2\tbatch Step: 0\tLoss: 0.178\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 100\tLoss: 0.219\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 200\tLoss: 0.432\tAccuracy: 94.000\n","epoch: 2\tbatch Step: 300\tLoss: 0.314\tAccuracy: 94.000\n","epoch: 2\tbatch Step: 400\tLoss: 0.060\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 500\tLoss: 0.118\tAccuracy: 96.000\n","epoch: 2\tbatch Step: 600\tLoss: 0.465\tAccuracy: 96.000\n","epoch: 2\tbatch Step: 700\tLoss: 0.179\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 800\tLoss: 0.178\tAccuracy: 96.000\n","epoch: 2\tbatch Step: 900\tLoss: 0.306\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 1000\tLoss: 0.751\tAccuracy: 90.000\n","epoch: 2\tbatch Step: 1100\tLoss: 0.139\tAccuracy: 96.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 3\tbatch Step: 0\tLoss: 0.065\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 100\tLoss: 0.142\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 200\tLoss: 0.395\tAccuracy: 96.000\n","epoch: 3\tbatch Step: 300\tLoss: 0.244\tAccuracy: 96.000\n","epoch: 3\tbatch Step: 400\tLoss: 0.430\tAccuracy: 92.000\n","epoch: 3\tbatch Step: 500\tLoss: 0.164\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 600\tLoss: 0.298\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 700\tLoss: 0.195\tAccuracy: 94.000\n","epoch: 3\tbatch Step: 800\tLoss: 0.193\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 900\tLoss: 0.084\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 1000\tLoss: 0.084\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 1100\tLoss: 0.218\tAccuracy: 96.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 4\tbatch Step: 0\tLoss: 0.308\tAccuracy: 96.000\n","epoch: 4\tbatch Step: 100\tLoss: 0.286\tAccuracy: 94.000\n","epoch: 4\tbatch Step: 200\tLoss: 0.184\tAccuracy: 98.000\n","epoch: 4\tbatch Step: 300\tLoss: 0.255\tAccuracy: 96.000\n","epoch: 4\tbatch Step: 400\tLoss: 0.159\tAccuracy: 98.000\n","epoch: 4\tbatch Step: 500\tLoss: 0.329\tAccuracy: 94.000\n","epoch: 4\tbatch Step: 600\tLoss: 0.090\tAccuracy: 98.000\n","epoch: 4\tbatch Step: 700\tLoss: 0.338\tAccuracy: 94.000\n","epoch: 4\tbatch Step: 800\tLoss: 0.103\tAccuracy: 96.000\n","epoch: 4\tbatch Step: 900\tLoss: 0.091\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 1000\tLoss: 0.013\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 1100\tLoss: 0.239\tAccuracy: 96.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 5\tbatch Step: 0\tLoss: 0.251\tAccuracy: 96.000\n","epoch: 5\tbatch Step: 100\tLoss: 0.069\tAccuracy: 98.000\n","epoch: 5\tbatch Step: 200\tLoss: 0.092\tAccuracy: 96.000\n","epoch: 5\tbatch Step: 300\tLoss: 0.094\tAccuracy: 96.000\n","epoch: 5\tbatch Step: 400\tLoss: 0.013\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 500\tLoss: 0.025\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 600\tLoss: 0.107\tAccuracy: 98.000\n","epoch: 5\tbatch Step: 700\tLoss: 0.203\tAccuracy: 96.000\n","epoch: 5\tbatch Step: 800\tLoss: 0.224\tAccuracy: 96.000\n","epoch: 5\tbatch Step: 900\tLoss: 0.040\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 1000\tLoss: 0.134\tAccuracy: 98.000\n","epoch: 5\tbatch Step: 1100\tLoss: 0.211\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 6\tbatch Step: 0\tLoss: 0.220\tAccuracy: 98.000\n","epoch: 6\tbatch Step: 100\tLoss: 0.029\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 200\tLoss: 0.031\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 300\tLoss: 0.231\tAccuracy: 98.000\n","epoch: 6\tbatch Step: 400\tLoss: 0.195\tAccuracy: 98.000\n","epoch: 6\tbatch Step: 500\tLoss: 0.050\tAccuracy: 98.000\n","epoch: 6\tbatch Step: 600\tLoss: 0.112\tAccuracy: 98.000\n","epoch: 6\tbatch Step: 700\tLoss: 0.090\tAccuracy: 98.000\n","epoch: 6\tbatch Step: 800\tLoss: 0.023\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 900\tLoss: 0.116\tAccuracy: 96.000\n","epoch: 6\tbatch Step: 1000\tLoss: 0.196\tAccuracy: 96.000\n","epoch: 6\tbatch Step: 1100\tLoss: 0.084\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 7\tbatch Step: 0\tLoss: 0.074\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 100\tLoss: 0.053\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 200\tLoss: 0.023\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 300\tLoss: 0.268\tAccuracy: 98.000\n","epoch: 7\tbatch Step: 400\tLoss: 0.031\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 500\tLoss: 0.209\tAccuracy: 96.000\n","epoch: 7\tbatch Step: 600\tLoss: 0.236\tAccuracy: 96.000\n","epoch: 7\tbatch Step: 700\tLoss: 0.045\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 800\tLoss: 0.029\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 900\tLoss: 0.092\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 1000\tLoss: 0.015\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 1100\tLoss: 0.155\tAccuracy: 96.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 8\tbatch Step: 0\tLoss: 0.017\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 100\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 200\tLoss: 0.033\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 300\tLoss: 0.063\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 400\tLoss: 0.021\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 500\tLoss: 0.084\tAccuracy: 98.000\n","epoch: 8\tbatch Step: 600\tLoss: 0.152\tAccuracy: 98.000\n","epoch: 8\tbatch Step: 700\tLoss: 0.138\tAccuracy: 96.000\n","epoch: 8\tbatch Step: 800\tLoss: 0.102\tAccuracy: 98.000\n","epoch: 8\tbatch Step: 900\tLoss: 0.107\tAccuracy: 96.000\n","epoch: 8\tbatch Step: 1000\tLoss: 0.010\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 1100\tLoss: 0.304\tAccuracy: 94.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 9\tbatch Step: 0\tLoss: 0.087\tAccuracy: 98.000\n","epoch: 9\tbatch Step: 100\tLoss: 0.027\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 200\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 300\tLoss: 0.016\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 400\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 500\tLoss: 0.270\tAccuracy: 94.000\n","epoch: 9\tbatch Step: 600\tLoss: 0.026\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 700\tLoss: 0.028\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 800\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 900\tLoss: 0.163\tAccuracy: 96.000\n","epoch: 9\tbatch Step: 1000\tLoss: 0.124\tAccuracy: 98.000\n","epoch: 9\tbatch Step: 1100\tLoss: 0.021\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 10\tbatch Step: 0\tLoss: 0.172\tAccuracy: 96.000\n","epoch: 10\tbatch Step: 100\tLoss: 0.075\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 200\tLoss: 0.127\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 300\tLoss: 0.084\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 400\tLoss: 0.494\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 500\tLoss: 0.010\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 600\tLoss: 0.377\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 700\tLoss: 0.043\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 800\tLoss: 0.062\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 900\tLoss: 0.055\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 1000\tLoss: 0.143\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 1100\tLoss: 0.028\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 11\tbatch Step: 0\tLoss: 0.231\tAccuracy: 98.000\n","epoch: 11\tbatch Step: 100\tLoss: 0.016\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 200\tLoss: 0.061\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 300\tLoss: 0.190\tAccuracy: 98.000\n","epoch: 11\tbatch Step: 400\tLoss: 0.031\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 500\tLoss: 0.194\tAccuracy: 98.000\n","epoch: 11\tbatch Step: 600\tLoss: 0.010\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 700\tLoss: 0.138\tAccuracy: 98.000\n","epoch: 11\tbatch Step: 800\tLoss: 0.029\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 900\tLoss: 0.052\tAccuracy: 98.000\n","epoch: 11\tbatch Step: 1000\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 1100\tLoss: 0.010\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 12\tbatch Step: 0\tLoss: 0.039\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 100\tLoss: 0.068\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 200\tLoss: 0.160\tAccuracy: 96.000\n","epoch: 12\tbatch Step: 300\tLoss: 0.211\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 400\tLoss: 0.015\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 500\tLoss: 0.126\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 600\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 700\tLoss: 0.171\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 800\tLoss: 0.184\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 900\tLoss: 0.025\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 1000\tLoss: 0.426\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 1100\tLoss: 0.057\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 13\tbatch Step: 0\tLoss: 0.040\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 100\tLoss: 0.025\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 200\tLoss: 0.085\tAccuracy: 98.000\n","epoch: 13\tbatch Step: 300\tLoss: 0.230\tAccuracy: 98.000\n","epoch: 13\tbatch Step: 400\tLoss: 0.008\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 500\tLoss: 0.169\tAccuracy: 96.000\n","epoch: 13\tbatch Step: 600\tLoss: 0.023\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 700\tLoss: 0.034\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 800\tLoss: 0.028\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 900\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 1000\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 1100\tLoss: 0.034\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 14\tbatch Step: 0\tLoss: 0.012\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 100\tLoss: 0.022\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 200\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 300\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 400\tLoss: 0.076\tAccuracy: 98.000\n","epoch: 14\tbatch Step: 500\tLoss: 0.143\tAccuracy: 98.000\n","epoch: 14\tbatch Step: 600\tLoss: 0.131\tAccuracy: 96.000\n","epoch: 14\tbatch Step: 700\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 800\tLoss: 0.117\tAccuracy: 98.000\n","epoch: 14\tbatch Step: 900\tLoss: 0.036\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 1000\tLoss: 0.046\tAccuracy: 98.000\n","epoch: 14\tbatch Step: 1100\tLoss: 0.261\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 15\tbatch Step: 0\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 100\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 200\tLoss: 0.068\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 300\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 400\tLoss: 0.034\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 500\tLoss: 0.008\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 700\tLoss: 0.052\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 800\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 900\tLoss: 0.215\tAccuracy: 96.000\n","epoch: 15\tbatch Step: 1000\tLoss: 0.063\tAccuracy: 98.000\n","epoch: 15\tbatch Step: 1100\tLoss: 0.008\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 16\tbatch Step: 0\tLoss: 0.024\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 100\tLoss: 0.063\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 200\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 300\tLoss: 0.129\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 400\tLoss: 0.166\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 600\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 700\tLoss: 0.014\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 800\tLoss: 0.059\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 900\tLoss: 0.050\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 1000\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 1100\tLoss: 0.017\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 17\tbatch Step: 0\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 100\tLoss: 0.191\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 200\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 300\tLoss: 0.043\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 400\tLoss: 0.012\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 500\tLoss: 0.112\tAccuracy: 96.000\n","epoch: 17\tbatch Step: 600\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 700\tLoss: 0.077\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 800\tLoss: 0.536\tAccuracy: 94.000\n","epoch: 17\tbatch Step: 900\tLoss: 0.067\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 1000\tLoss: 0.083\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 1100\tLoss: 0.212\tAccuracy: 96.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 18\tbatch Step: 0\tLoss: 0.016\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 100\tLoss: 0.200\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 200\tLoss: 0.048\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 300\tLoss: 0.012\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 400\tLoss: 0.010\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 500\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 600\tLoss: 0.048\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 700\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 800\tLoss: 0.041\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 900\tLoss: 0.056\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 1000\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 1100\tLoss: 0.019\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 19\tbatch Step: 0\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 100\tLoss: 0.054\tAccuracy: 98.000\n","epoch: 19\tbatch Step: 200\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 300\tLoss: 0.036\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 400\tLoss: 0.116\tAccuracy: 98.000\n","epoch: 19\tbatch Step: 500\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 600\tLoss: 0.015\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 700\tLoss: 0.020\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 800\tLoss: 0.017\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 900\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 1000\tLoss: 0.231\tAccuracy: 96.000\n","epoch: 19\tbatch Step: 1100\tLoss: 0.006\tAccuracy: 100.000\n","==================================\n","train_epoch_loss: [0.9035807167117794, 0.35360130556082975, 0.2656546801662383, 0.21380464119603856, 0.18472561437170953, 0.15682538043552388, 0.1446397135758889, 0.12700555537904923, 0.11657095280572927, 0.10244527893203971, 0.09786908986989147, 0.0876809839757819, 0.08575268961876038, 0.07332843753645041, 0.07504512196552242, 0.06717732803455874, 0.06502294396109695, 0.06098895519920916, 0.057971115454856774, 0.05079624178129658]\n","test_epoch_loss: [0.6725798845291138, 0.43547001481056213, 0.25932976603507996, 0.4510086178779602, 0.19573026895523069, 0.39571744203567505, 0.2156877964735031, 0.05003924667835235, 0.39014941453933716, 0.08645980805158615, 0.013746355660259724, 0.03688536584377289, 0.004373298957943916, 0.0371277779340744, 0.07497538626194, 0.16079802811145782, 0.005752801429480314, 0.10277888923883438, 0.003980742767453194, 0.01357779186218977]\n","train_epoch_acc [85.165, 94.63666666666667, 95.935, 96.77666666666667, 97.20666666666666, 97.58666666666667, 97.78, 98.09166666666667, 98.205, 98.37666666666667, 98.44333333333333, 98.63, 98.685, 98.83833333333334, 98.845, 98.92166666666667, 98.96833333333333, 98.99, 99.07333333333334, 99.19166666666666]\n","test_epoch_acc [85.165, 94.63666666666667, 95.935, 96.77666666666667, 97.20666666666666, 97.58666666666667, 97.78, 98.09166666666667, 98.205, 98.37666666666667, 98.44333333333333, 98.63, 98.685, 98.83833333333334, 98.845, 98.92166666666667, 98.96833333333333, 98.99, 99.07333333333334, 99.19166666666666]\n","==================================\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"J31wFkZzZviK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1599542192263,"user_tz":-540,"elapsed":2831,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"b2e1eabb-e12c-4c55-de6a-ffb70259540b"},"source":["''' 모델 불러오기 '''\n","\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./DNN\"\n","option = 2\n","\n","if option == 0:\n","    # 모델 클래스는 어딘가에 반드시 선언되어 있어야 합니다\n","    model_path = model_name + '_all.pt'\n","    model = torch.load(model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    model = DNN_Net()\n","    model.load_state_dict(torch.load(model_path))\n","\n","elif option == 2:\n","    # model, optimizer 초기화\n","    model = DNN_Net()\n","    optimizer = optim.Adam(model.parameters(), lr=lr)\n","\n","    model_path = model_name + '_ckp.tar'\n","    checkpoint = torch.load(model_path)\n","    model.load_state_dict(checkpoint['model_state_dict'])\n","    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n","    last_epoch = checkpoint['last_epoch']\n","    loss = checkpoint['loss']\n","\n","\n","''' Plot Test '''\n","model.eval()\n","test_batch_loss = []\n","test_batch_acc = []\n","test_batch_num = len(test_loader)\n","\n","num_test_img = 10\n","plt_row = 2\n","plt_col = num_test_img /2\n","cnt = 0\n","fig_test = plt.figure(figsize=(12, 8))\n","with torch.no_grad():\n","    for batch_idx, (x, target) in enumerate(test_loader):  \n","        if batch_idx > 0 : # 일부만 확인할거임\n","            break\n","        for b in range(batch_size):\n","            if cnt >= num_test_img :\n","                break\n","            img = x[b]\n","            output = model(img)\n","            prediction = output.argmax(dim=1, keepdims = False).item()\n","            subplt = fig_test.add_subplot(plt_row, plt_col, b + 1)\n","            subplt.set_title(\"prediction : %d\" % prediction)\n","            subplt.imshow(img.reshape((28, 28)), cmap=plt.cm.gray_r)\n","\n","            cnt += 1\n","plt.show()\n"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 10 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"qCR-8qxc_9ZR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599539884529,"user_tz":-540,"elapsed":802,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"65f85fab-130d-4a16-bc54-999494781449"},"source":["'''trainable parameter 확인'''\n","param_dict = {}\n","for param_tensor in model.state_dict():\n","    param_dict[param_tensor] = model.state_dict()[param_tensor]\n","    print(param_tensor, model.state_dict()[param_tensor].size())\n","\n","print(\"========================\")\n","print(param_dict)"],"execution_count":49,"outputs":[{"output_type":"stream","text":["fc1.weight torch.Size([512, 784])\n","fc1.bias torch.Size([512])\n","fc2.weight torch.Size([256, 512])\n","fc2.bias torch.Size([256])\n","fc3.weight torch.Size([128, 256])\n","fc3.bias torch.Size([128])\n","fc4.weight torch.Size([64, 128])\n","fc4.bias torch.Size([64])\n","fc5.weight torch.Size([32, 64])\n","fc5.bias torch.Size([32])\n","fc6.weight torch.Size([10, 32])\n","fc6.bias torch.Size([10])\n","{'fc1.weight': tensor([[ 0.0178, -0.0313,  0.0153,  ...,  0.0320, -0.0134, -0.0018],\n","        [ 0.0103, -0.0084,  0.0005,  ...,  0.0436, -0.0225,  0.0307],\n","        [-0.0057,  0.0106, -0.0169,  ...,  0.0303,  0.0247,  0.0242],\n","        ...,\n","        [-0.0181, -0.0010, -0.0074,  ..., -0.0161, -0.0292, -0.0012],\n","        [-0.0268, -0.0010, -0.0125,  ...,  0.0367,  0.0395, -0.0041],\n","        [ 0.0048,  0.0135,  0.0201,  ...,  0.0145,  0.0290,  0.0299]]), 'fc1.bias': tensor([ 2.7251e-02, -1.0061e-02, -2.5854e-02,  6.2849e-03,  1.5628e-02,\n","         2.3756e-02, -6.7040e-03,  5.9113e-03, -1.6234e-02, -1.7354e-02,\n","        -1.4856e-02, -2.3461e-02, -2.5815e-02, -2.2201e-02, -1.3855e-02,\n","         1.3635e-02,  1.6872e-02,  2.9144e-02, -1.0693e-03,  3.2511e-03,\n","        -2.1241e-02, -1.2595e-02,  1.3324e-02, -1.7020e-02, -5.3032e-03,\n","        -3.6009e-02,  1.0602e-02, -3.3771e-02, -1.8142e-02,  7.1262e-03,\n","        -2.6052e-03, -2.3137e-02, -2.7401e-02,  3.7765e-02,  2.6412e-02,\n","        -3.2114e-02, -3.1320e-02,  1.3542e-02,  1.4125e-02, -8.1648e-03,\n","        -1.9232e-02, -2.9148e-02,  1.7345e-02, -4.0122e-02,  1.1418e-02,\n","        -4.8806e-03,  2.4100e-02, -2.5301e-02, -4.0003e-02, -3.3719e-02,\n","        -5.5979e-03, -2.2995e-02, -3.1285e-02, -9.6948e-03,  6.6422e-03,\n","         3.6996e-02, -8.6475e-04,  2.3025e-03,  9.9211e-03,  1.2195e-02,\n","         7.9100e-03, -3.3380e-02, -9.8379e-03,  8.2824e-03,  2.4071e-02,\n","         2.7192e-03,  1.7161e-02,  7.3289e-03, -1.5759e-02, -8.4321e-03,\n","         3.1429e-02,  1.0661e-02,  2.7307e-02,  9.5111e-03, -1.7599e-02,\n","        -2.7174e-02,  2.2271e-02, -3.4319e-03, -1.0927e-02,  2.7706e-02,\n","         4.8659e-02,  9.1367e-03,  1.0440e-02,  2.1903e-02, -1.4481e-02,\n","        -2.9201e-02, -2.6770e-03,  3.2634e-02, -4.0190e-02,  5.1243e-03,\n","         5.5679e-03,  4.5742e-03, -4.4868e-02, -2.6678e-02, -2.6332e-02,\n","        -3.7017e-02, -1.6915e-02,  2.5851e-02, -3.9080e-02, -5.8470e-03,\n","         2.0913e-04, -3.3049e-02,  3.5134e-03,  5.8118e-03, -1.9446e-02,\n","        -2.8620e-02, -1.8411e-02, -1.7265e-02, -1.1051e-02,  1.8334e-02,\n","         2.0184e-02, -2.8114e-02,  2.7433e-02,  1.1335e-02, -2.0062e-02,\n","        -4.3127e-02, -3.4886e-02,  8.1593e-03,  3.5572e-02,  7.5644e-03,\n","         3.8515e-02, -2.3176e-02,  8.9962e-03,  3.2870e-02,  3.0654e-02,\n","        -9.1970e-03, -3.2105e-02, -8.6257e-03,  1.3190e-03,  1.8026e-02,\n","         8.8748e-03, -2.9373e-02, -4.2226e-02,  1.7107e-02, -3.6465e-02,\n","        -5.2494e-05,  1.1396e-02,  1.7483e-03, -1.6486e-02,  1.7306e-02,\n","         2.6923e-02,  5.3818e-03,  7.2390e-03, -3.3929e-02, -2.7271e-02,\n","        -3.8692e-02, -7.4436e-03, -3.0543e-02, -7.8009e-03, -1.4770e-04,\n","         1.1598e-02,  2.5480e-02,  8.5923e-03, -3.6370e-02,  2.8532e-02,\n","         1.8016e-02, -6.3621e-03, -9.4856e-04, -2.6520e-02, -6.6878e-03,\n","        -1.6452e-03, -2.0050e-02, -3.2513e-02,  9.3294e-03,  1.3656e-02,\n","         1.1389e-02, -3.6471e-02,  2.6099e-02, -1.6945e-02,  1.2633e-02,\n","         1.6327e-03, -1.7226e-02, -3.9648e-02,  1.3555e-02,  2.0147e-02,\n","         3.1621e-02, -1.8539e-02,  2.0590e-03, -4.0774e-02, -8.6576e-03,\n","         1.7031e-02, -3.7982e-02, -3.7905e-03, -1.4786e-02, -2.1475e-02,\n","         9.2544e-03,  1.1951e-02, -6.3608e-03,  3.1636e-02, -2.5704e-03,\n","        -1.2651e-02, -1.6660e-02,  1.4529e-02, -1.8602e-02, -6.1310e-03,\n","        -2.2195e-02, -3.2423e-02, -8.0736e-03, -1.0083e-02,  5.2343e-03,\n","        -3.0535e-02,  1.0548e-02, -9.9932e-03,  1.5233e-02, -2.9542e-02,\n","         1.3064e-02, -2.0917e-03,  1.1958e-02, -2.4411e-02, -1.0155e-02,\n","        -3.8325e-02, -1.4549e-02, -1.8294e-02, -1.6993e-02, -1.8072e-02,\n","        -6.3406e-03,  1.3397e-02, -1.0063e-02, -3.8491e-02, -3.0579e-03,\n","        -4.0200e-02, -3.1337e-02,  5.7688e-04, -1.7042e-02, -7.8795e-03,\n","        -3.9376e-02,  1.0633e-03, -3.6253e-03,  2.3157e-02,  1.8883e-02,\n","         2.7385e-02, -2.5085e-02,  2.8175e-03, -2.0150e-02, -2.8004e-02,\n","         2.0715e-02,  2.5830e-02,  1.1116e-02, -3.9769e-02, -1.0140e-02,\n","        -1.0983e-02, -2.2346e-02, -4.3689e-02, -4.1273e-02, -7.8916e-03,\n","         2.4338e-02, -2.1364e-03, -1.6887e-02, -3.9079e-02, -1.6778e-02,\n","        -3.6258e-02, -1.8561e-02, -1.4165e-02, -1.3699e-02,  2.9805e-02,\n","        -6.2933e-03, -3.6591e-02, -3.4981e-02,  1.1407e-02, -4.5124e-03,\n","        -2.4821e-02,  1.7494e-02,  1.2629e-02, -3.5249e-02,  7.9583e-03,\n","        -3.3363e-02, -1.6982e-03, -1.4062e-02,  1.2132e-02,  1.1908e-02,\n","        -1.4540e-03, -1.5794e-03,  4.0714e-02, -1.4594e-02, -3.9485e-02,\n","        -1.0249e-02, -3.6754e-02,  6.8387e-03, -3.2269e-02, -4.0618e-02,\n","        -2.6772e-02, -1.9310e-02, -3.3071e-02,  1.2437e-04, -3.6596e-02,\n","         1.4059e-02,  3.1238e-02,  1.3149e-02, -5.7187e-03,  1.8620e-02,\n","        -2.7887e-02, -1.2835e-02, -2.1285e-02, -2.3794e-02, -3.7962e-02,\n","         1.0469e-02,  3.8574e-03,  2.6785e-02, -1.1643e-04, -2.8093e-02,\n","        -2.9444e-02,  1.2947e-02,  1.0840e-02, -1.7038e-02, -3.8349e-02,\n","         1.7700e-02,  1.1633e-03,  1.9315e-02,  1.6913e-02,  5.8847e-03,\n","        -3.1744e-02, -2.9608e-02,  1.0485e-02, -3.3740e-02, -3.4967e-02,\n","        -1.6555e-02, -1.2025e-02, -1.3818e-02, -9.4697e-03,  2.3243e-03,\n","        -2.2179e-02, -2.0214e-02,  6.2034e-03,  7.5203e-03,  1.4817e-02,\n","         8.9318e-03,  1.6486e-02, -3.1757e-02, -1.1042e-03, -1.3452e-02,\n","        -3.3927e-02, -3.2521e-02, -4.1341e-02, -1.9326e-02, -1.6641e-02,\n","        -2.7685e-02, -2.9617e-02, -3.1234e-02, -9.1539e-03, -2.4311e-02,\n","        -7.2858e-03, -3.1706e-03, -1.2505e-03, -3.0680e-02,  2.2704e-02,\n","        -1.4030e-02, -1.1391e-02,  1.2285e-02, -3.4763e-02,  6.3538e-03,\n","        -1.7100e-02, -3.7603e-02,  6.6790e-03, -2.2992e-02, -1.6647e-02,\n","         1.4163e-03,  3.1375e-02, -1.1375e-02, -1.0576e-02,  1.5358e-02,\n","         1.4961e-02, -2.1890e-02,  1.7398e-02,  7.0889e-03,  1.1865e-02,\n","         1.1509e-02, -4.2301e-02,  2.9724e-02,  2.1033e-02,  3.1255e-02,\n","        -1.2264e-02,  9.8400e-03, -5.3306e-03,  9.8042e-03,  2.3563e-02,\n","         7.3225e-03, -9.9824e-03, -4.1299e-02,  4.2191e-03, -3.5565e-02,\n","        -6.4189e-03,  2.0560e-02, -2.5204e-02, -2.3034e-02,  5.9475e-03,\n","        -7.7960e-03, -1.9296e-03,  1.1221e-02, -2.3746e-02,  1.3760e-03,\n","        -2.6706e-02,  9.4120e-03,  1.6917e-02, -1.4817e-02, -8.6255e-03,\n","         4.2188e-04,  2.9923e-03,  6.2891e-03,  1.1935e-02, -9.9409e-03,\n","        -5.4050e-02, -5.6509e-03,  2.2741e-02, -3.6742e-02,  2.3763e-02,\n","         7.8912e-03, -1.6871e-02,  1.1891e-02, -3.9710e-02,  3.9079e-02,\n","         1.5333e-03, -1.1567e-02, -1.2752e-02,  1.7687e-02, -1.8838e-02,\n","        -6.8656e-03, -2.5961e-02,  2.0550e-02, -3.0601e-02,  1.3059e-02,\n","         1.5365e-02, -3.9238e-02,  1.2206e-02, -2.8783e-03,  2.6426e-02,\n","        -3.2795e-02, -1.4938e-03, -2.5552e-02,  2.1762e-02,  1.8620e-02,\n","         1.4587e-02,  5.3979e-03,  4.8173e-02, -2.3764e-03, -1.4374e-02,\n","        -1.3721e-02, -3.2335e-02,  1.9149e-02, -6.2191e-03, -7.0779e-03,\n","         2.1650e-02,  2.6612e-02,  8.3014e-03, -1.8274e-03,  6.9358e-03,\n","         1.2351e-02, -3.7795e-02,  1.7008e-02,  4.9989e-03, -1.1518e-02,\n","        -4.0082e-02, -8.8722e-03, -2.9230e-02,  2.2661e-02,  1.0057e-02,\n","         2.8604e-02, -2.5754e-02,  1.2474e-02,  1.8676e-02,  3.3181e-02,\n","        -3.5164e-02,  1.0119e-02, -2.0524e-02,  1.8579e-02, -2.7482e-02,\n","         5.7252e-03, -3.3228e-02, -2.8320e-02, -4.7514e-03,  1.7292e-02,\n","        -4.2521e-03, -2.0041e-02, -2.8292e-02, -3.6636e-02, -1.7062e-02,\n","        -1.8064e-02,  9.4015e-03, -1.1034e-03, -3.1597e-02, -2.9097e-02,\n","        -1.7289e-02, -3.4953e-02, -1.6839e-02,  7.1778e-03, -1.4076e-03,\n","        -2.2553e-02,  1.9369e-02,  4.8847e-03, -7.0146e-03, -6.5679e-03,\n","        -2.3222e-02, -3.5899e-02,  1.0371e-02, -1.9182e-02,  2.7823e-02,\n","         2.2234e-02,  2.1665e-02, -3.9149e-02,  2.0112e-03, -2.9730e-02,\n","        -5.0181e-02,  2.8793e-02, -9.5061e-03, -9.6208e-03, -1.9672e-02,\n","        -3.4069e-03, -4.3966e-02,  2.8360e-02, -2.1068e-02, -1.5341e-03,\n","        -2.1919e-02,  1.0906e-02]), 'fc2.weight': tensor([[ 0.0556, -0.0266, -0.0517,  ...,  0.0582, -0.0384,  0.0051],\n","        [-0.0457, -0.0137, -0.0341,  ..., -0.0067, -0.0178,  0.0279],\n","        [ 0.0177, -0.0044, -0.0482,  ..., -0.0433, -0.0245,  0.0017],\n","        ...,\n","        [-0.0236,  0.0359, -0.0609,  ..., -0.0566, -0.0369, -0.0213],\n","        [ 0.0947, -0.0174,  0.0753,  ...,  0.0218,  0.0420,  0.0044],\n","        [-0.0077,  0.0432, -0.0374,  ...,  0.0346,  0.0103, -0.0402]]), 'fc2.bias': tensor([ 0.0751,  0.0039, -0.0366,  0.0287, -0.0042,  0.0165, -0.0479, -0.0221,\n","         0.0375, -0.0618,  0.0375,  0.0299,  0.0092, -0.0388,  0.0096, -0.0452,\n","        -0.0262,  0.0079, -0.0173, -0.0590, -0.0322,  0.0053, -0.0345,  0.0042,\n","         0.0085,  0.0442,  0.0397,  0.0100,  0.0493,  0.0586,  0.0391, -0.0148,\n","        -0.0261,  0.0365,  0.0275, -0.0620,  0.0308,  0.0414, -0.0185,  0.0101,\n","         0.0373, -0.0161, -0.0231,  0.0072,  0.0621, -0.0162, -0.0552, -0.0120,\n","         0.0009,  0.0382,  0.0116, -0.0454, -0.0065, -0.0116, -0.0280,  0.0099,\n","         0.0465,  0.0338, -0.0383, -0.0390,  0.0115,  0.0384, -0.0303, -0.0149,\n","        -0.0172,  0.0152,  0.0128,  0.0401,  0.0386, -0.0717,  0.0313, -0.0362,\n","        -0.0541,  0.0498,  0.0082, -0.0949, -0.0099,  0.0715,  0.0387,  0.0086,\n","        -0.0715,  0.0189, -0.0196, -0.0031,  0.0411,  0.0039,  0.0321, -0.0423,\n","        -0.0442, -0.0772,  0.0212,  0.0118,  0.0209,  0.0195,  0.0214, -0.0493,\n","         0.0009,  0.0056,  0.0390,  0.0333, -0.0479,  0.0029, -0.0117,  0.0031,\n","        -0.0272,  0.0426, -0.0135,  0.0393,  0.0298, -0.0084,  0.0580, -0.0029,\n","         0.0606,  0.0033, -0.0196, -0.0255, -0.0051,  0.0198,  0.0406, -0.0628,\n","         0.0299,  0.0561,  0.0495, -0.0294,  0.0473, -0.0437, -0.0162, -0.0077,\n","         0.0522, -0.0470, -0.0489,  0.0810, -0.0408, -0.0949, -0.0469, -0.0595,\n","        -0.0420,  0.0418, -0.0019,  0.0588,  0.0822, -0.0264,  0.0019, -0.0210,\n","         0.0271, -0.0464, -0.0362,  0.0415, -0.0217, -0.0436, -0.0518,  0.0250,\n","         0.0784,  0.0553,  0.0525,  0.0502, -0.0136, -0.0496, -0.0147, -0.0403,\n","         0.0637, -0.0146,  0.0306,  0.0247,  0.0228,  0.0357,  0.0003, -0.0303,\n","         0.0383,  0.0886,  0.0004, -0.0364, -0.0799, -0.0359,  0.0379, -0.0220,\n","         0.0166, -0.0741,  0.0367,  0.0045,  0.0097, -0.0113,  0.0329, -0.0317,\n","        -0.0550, -0.0285,  0.0143,  0.0401,  0.0655,  0.0255,  0.0247, -0.0281,\n","         0.0269,  0.0298, -0.0387,  0.0449,  0.0121,  0.0464,  0.0319,  0.0020,\n","         0.0087,  0.0416, -0.0070,  0.0084,  0.0370, -0.0286, -0.0460, -0.0508,\n","         0.0176,  0.0307, -0.0077,  0.0617, -0.0274, -0.0050, -0.0009, -0.0546,\n","         0.0860,  0.0511, -0.0477, -0.0021,  0.0431, -0.0096, -0.0528, -0.0200,\n","        -0.0419,  0.0025,  0.0309, -0.0113,  0.0355, -0.0311, -0.0087,  0.0411,\n","         0.0966, -0.0847,  0.0712, -0.0237,  0.0789,  0.0310,  0.0328, -0.0646,\n","         0.0001, -0.0057, -0.0605, -0.0150, -0.0179,  0.0140, -0.0163, -0.0054,\n","        -0.0415, -0.0864,  0.0491,  0.0107, -0.0343, -0.0134,  0.0065, -0.0096]), 'fc3.weight': tensor([[ 0.1038, -0.0381,  0.0500,  ...,  0.0083,  0.0714,  0.0314],\n","        [ 0.1088, -0.0506,  0.0381,  ..., -0.0018,  0.0907,  0.0242],\n","        [-0.0380, -0.0528,  0.0307,  ...,  0.0826,  0.0910,  0.0212],\n","        ...,\n","        [-0.0032,  0.0432, -0.0218,  ...,  0.0276,  0.0072,  0.0062],\n","        [ 0.0798,  0.0454,  0.0416,  ...,  0.0307, -0.0303, -0.0259],\n","        [-0.0350,  0.0234, -0.0091,  ...,  0.0200,  0.0476, -0.0235]]), 'fc3.bias': tensor([ 3.1587e-02,  1.0990e-01,  1.0444e-01,  4.4934e-02,  1.0343e-02,\n","         3.0760e-02,  6.4333e-02, -5.5332e-03,  5.7106e-02, -3.8656e-02,\n","         2.6507e-02, -2.2431e-02,  6.6666e-02, -6.9117e-02, -2.0669e-02,\n","        -3.2033e-02,  3.6986e-02, -5.5004e-02,  2.8906e-02,  5.1334e-02,\n","        -4.2837e-02, -2.7165e-02, -4.4392e-02,  5.2775e-04, -2.8654e-02,\n","         6.1982e-02, -8.0293e-02, -7.2299e-02, -2.7080e-02,  4.4977e-02,\n","         9.2804e-02, -7.5983e-02, -4.8806e-02, -2.1275e-02, -5.6693e-02,\n","        -4.0880e-02,  2.2774e-02,  5.0024e-03, -6.6991e-02,  7.2079e-02,\n","        -6.2602e-02, -1.9304e-02,  7.5793e-02,  5.5263e-03,  4.0615e-02,\n","        -8.3545e-02,  4.6470e-02, -5.7885e-02, -2.5989e-02,  7.1092e-02,\n","        -2.6314e-02,  3.0006e-02,  4.9188e-02,  7.2241e-02,  8.1083e-02,\n","        -3.8087e-02,  6.3286e-03,  3.3427e-02, -1.6885e-02, -2.7147e-02,\n","         3.5224e-03,  2.7791e-02,  8.9598e-02,  5.4218e-02,  3.6207e-02,\n","        -3.0238e-02,  4.9961e-02, -1.5594e-02, -2.3378e-03, -2.1838e-02,\n","         1.3180e-02,  4.4086e-02,  5.1162e-03,  6.3101e-02,  1.6388e-02,\n","         8.3341e-02, -5.6922e-02, -7.5757e-02, -9.9623e-02,  4.8752e-02,\n","        -5.4248e-02,  2.1281e-02, -7.5510e-02, -6.0392e-02, -7.0691e-02,\n","         1.4111e-02,  3.4065e-02,  5.9553e-02,  5.0368e-04, -2.2500e-02,\n","        -2.1014e-02, -4.2844e-02, -9.5589e-03,  1.7866e-02,  1.7935e-02,\n","         8.7022e-02, -1.2618e-02,  6.2921e-03,  1.3882e-02, -1.7520e-02,\n","         1.5161e-02, -1.3350e-02,  1.0108e-02,  8.6498e-02,  1.4553e-02,\n","         4.5491e-02,  2.7796e-02, -7.5728e-02,  3.7157e-02, -4.1684e-03,\n","        -5.0073e-03,  7.8102e-02,  9.8698e-02, -8.9487e-02, -5.2289e-02,\n","         8.3856e-05, -3.7017e-02,  6.7913e-02,  4.0090e-02,  3.8580e-02,\n","        -4.6376e-02,  1.5691e-02,  3.4640e-02, -7.3521e-02, -2.0593e-02,\n","         3.3242e-02, -3.6003e-02, -2.3754e-02]), 'fc4.weight': tensor([[ 0.0161, -0.0477, -0.0938,  ..., -0.0656, -0.0514,  0.0121],\n","        [ 0.0847, -0.0046, -0.0931,  ..., -0.0019, -0.0015,  0.0350],\n","        [ 0.0224,  0.0797,  0.0169,  ...,  0.0920,  0.0083,  0.0026],\n","        ...,\n","        [ 0.0801, -0.2164, -0.2435,  ..., -0.0754, -0.0247, -0.0446],\n","        [ 0.0288,  0.0083,  0.0079,  ..., -0.0848, -0.0413,  0.0386],\n","        [ 0.0735,  0.0170,  0.0679,  ...,  0.0221,  0.0388,  0.0857]]), 'fc4.bias': tensor([-0.0598, -0.0089,  0.0092, -0.0173,  0.0419,  0.0839, -0.0123, -0.0273,\n","        -0.0273, -0.0475, -0.0546,  0.0982,  0.0940, -0.1093,  0.0471, -0.0166,\n","         0.0264,  0.0716,  0.0794,  0.0932, -0.0554,  0.0194, -0.0204, -0.0214,\n","         0.0985, -0.0029, -0.0299,  0.1094,  0.1201, -0.0313, -0.0014,  0.0119,\n","         0.0310,  0.0074, -0.0304,  0.0716,  0.0019,  0.1072, -0.0518,  0.0836,\n","         0.0367,  0.0798, -0.0198, -0.0471,  0.0572, -0.0321, -0.0187,  0.0534,\n","         0.0961,  0.0058, -0.0375,  0.0140,  0.0044, -0.0038, -0.0578,  0.0184,\n","         0.1534,  0.0419, -0.0953,  0.1133, -0.0354,  0.0028, -0.0088, -0.0836]), 'fc5.weight': tensor([[-0.0053, -0.0158,  0.0494,  ..., -0.1892, -0.0023,  0.0771],\n","        [-0.1060,  0.1247,  0.1147,  ...,  0.0411,  0.1206,  0.0055],\n","        [ 0.0352, -0.0415, -0.0928,  ..., -0.1336,  0.1018, -0.0955],\n","        ...,\n","        [ 0.1467, -0.0066,  0.0079,  ...,  0.1343,  0.0457, -0.0804],\n","        [ 0.1197,  0.1841,  0.0117,  ..., -0.0851, -0.0430,  0.0515],\n","        [-0.1166,  0.0042, -0.1057,  ..., -0.1000,  0.0468,  0.0284]]), 'fc5.bias': tensor([-0.0885, -0.0390,  0.0916, -0.0370,  0.1009,  0.0556,  0.0793,  0.0873,\n","         0.0528,  0.0763,  0.0350,  0.0211, -0.0192, -0.1216, -0.1094,  0.0805,\n","         0.0169, -0.0726,  0.0213,  0.0530, -0.1013, -0.0896,  0.0627, -0.0423,\n","        -0.0579, -0.1433,  0.0926, -0.0823, -0.0932,  0.1289, -0.0044, -0.1092]), 'fc6.weight': tensor([[ 0.0366, -0.0720, -0.1236, -0.0812,  0.0024, -0.0404,  0.1505, -0.0955,\n","          0.2171, -0.1871, -0.1750,  0.1165, -0.2369,  0.1505,  0.0720, -0.0852,\n","         -0.1447, -0.0421, -0.0669, -0.1769, -0.1755, -0.1338, -0.1066,  0.0922,\n","         -0.1157,  0.1451, -0.2053, -0.1524,  0.0657,  0.1403,  0.0581, -0.1778],\n","        [-0.2318, -0.1332,  0.0308,  0.0216,  0.0409, -0.0719, -0.0039,  0.2217,\n","         -0.1718,  0.0678, -0.0018, -0.0500,  0.0947, -0.0118,  0.1386, -0.0803,\n","         -0.0570, -0.1807,  0.2342,  0.0010, -0.1931,  0.1420, -0.0903, -0.1984,\n","         -0.1493, -0.0322,  0.2462,  0.0991, -0.0799, -0.2072,  0.0573,  0.0995],\n","        [-0.0809,  0.0055,  0.0329,  0.1634, -0.1052, -0.1451, -0.0756, -0.0294,\n","          0.1236,  0.0567, -0.2089, -0.0703, -0.0114,  0.1328, -0.0576,  0.1557,\n","         -0.2038,  0.1072, -0.0493,  0.0892,  0.0355, -0.0325, -0.0342,  0.0829,\n","          0.0084, -0.0149,  0.1300,  0.0215,  0.0082,  0.1719, -0.0485, -0.1026],\n","        [ 0.1747, -0.0899, -0.2280,  0.1112, -0.0503, -0.0388, -0.1129,  0.1852,\n","         -0.0050,  0.0386,  0.0530,  0.0324, -0.1200, -0.0566, -0.0438, -0.0807,\n","         -0.2595,  0.0216,  0.1453, -0.1095, -0.0886, -0.1424,  0.0461, -0.0176,\n","          0.0769,  0.0286, -0.1081, -0.0601, -0.0276, -0.0578,  0.0485, -0.1289],\n","        [-0.1446, -0.0038,  0.0076, -0.0615, -0.2135,  0.1810, -0.0589, -0.1444,\n","         -0.1727,  0.0946,  0.0544, -0.1667,  0.1211, -0.1350,  0.0749,  0.0205,\n","         -0.0709, -0.0092,  0.0438, -0.1176, -0.0573,  0.0293,  0.1626,  0.1672,\n","          0.1545,  0.0874, -0.1131, -0.0487,  0.1125,  0.0868,  0.0234, -0.0738],\n","        [ 0.1618, -0.0293, -0.0486,  0.0013, -0.1018, -0.1964, -0.0223, -0.0703,\n","          0.0489, -0.0491,  0.0938,  0.0753,  0.0844, -0.0916,  0.0981,  0.0639,\n","          0.1380,  0.0449, -0.0568,  0.1290,  0.0332,  0.0888, -0.0734, -0.0469,\n","          0.1543, -0.0310, -0.1298,  0.0235,  0.0258, -0.1805,  0.0915,  0.0564],\n","        [ 0.1082,  0.1754,  0.0273, -0.1889,  0.1705,  0.1507,  0.0747, -0.2008,\n","         -0.0038, -0.0105,  0.1095, -0.1184, -0.0491, -0.0387,  0.0640,  0.0998,\n","          0.0584, -0.1685, -0.0011,  0.0212,  0.1121,  0.0517, -0.2559, -0.1894,\n","          0.1538, -0.0088,  0.0649,  0.0341, -0.2555,  0.0679, -0.0373,  0.0106],\n","        [-0.0864,  0.0703, -0.1391,  0.1618, -0.2502, -0.1180,  0.1715,  0.0658,\n","          0.0217, -0.1198, -0.0117, -0.2261, -0.1666,  0.1125, -0.1378, -0.1425,\n","          0.1681, -0.2964,  0.2083,  0.1152,  0.0076, -0.0878,  0.1844,  0.1116,\n","          0.1595, -0.1618, -0.0600,  0.0886, -0.2288, -0.1143, -0.1640,  0.0597],\n","        [ 0.1166, -0.0212, -0.2080, -0.1133,  0.1593, -0.0065, -0.1555,  0.0263,\n","          0.0527, -0.1611, -0.1358,  0.0184,  0.0690,  0.1217,  0.1345, -0.1044,\n","          0.0448,  0.0163, -0.0448, -0.1482, -0.1820, -0.0098,  0.0896,  0.0816,\n","          0.1293,  0.1024,  0.1914, -0.0570, -0.0656, -0.1847, -0.1668,  0.1371],\n","        [-0.0785,  0.0423,  0.1292,  0.2153, -0.0717,  0.0577, -0.1786, -0.0351,\n","         -0.0585, -0.1803,  0.1647,  0.0856, -0.0086,  0.0172, -0.1300,  0.0541,\n","          0.0758, -0.1080, -0.1706, -0.2912, -0.0723, -0.0819,  0.0739,  0.1568,\n","          0.1144,  0.0963, -0.1366, -0.1542,  0.0997, -0.1912, -0.1272, -0.0628]]), 'fc6.bias': tensor([ 0.1433, -0.0994,  0.1359, -0.1359,  0.0970, -0.0512, -0.0894,  0.1160,\n","        -0.0830, -0.1210])}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gKfimwHbALjd","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}