{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN34EIPN4GuBjyIsLpQzY74"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Nz7zDemgQM5m","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599638756846,"user_tz":-540,"elapsed":1207,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"760885b6-aa4c-414b-ac43-bcdcec5492c5"},"source":["%pwd"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content'"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"1CAUBQkGQ_b5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":131},"executionInfo":{"status":"ok","timestamp":1599638795768,"user_tz":-540,"elapsed":38240,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"3a09077c-6c09-4699-b78d-6095d9aa47ea"},"source":["from google.colab import drive\n","drive.mount('../content/drive', force_remount=True)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","4/3wGB-iGec1pRmPn85D2Uy0Hm5hP1J5nHIDPbVmtt0JuBHAjjjP0NXC4\n","Mounted at ../content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Oe8BvCzIFFyL","colab_type":"text"},"source":["# 바꿔야할 부분\n","※ 경로"]},{"cell_type":"code","metadata":{"id":"oFfFh2VA1UvB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599638797606,"user_tz":-540,"elapsed":872,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"61564a3a-c866-4cc9-eced-99ed81b35d21"},"source":["cd ../content/drive/My Drive/Pytorch/CNN"],"execution_count":5,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Pytorch/CNN\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P8k_tmSQREIi","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599638799438,"user_tz":-540,"elapsed":1081,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' import libraries '''\n","\n","%matplotlib inline\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision.transforms import transforms  # 1 batch = (1, 784)\n","from torchvision.datasets import MNIST\n","from torch.autograd import Variable\n","from torch.utils.data.dataloader import DataLoader\n","from matplotlib import pyplot as plt\n","import numpy as np\n","from torchsummary import summary"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"JGOQJKoVwdqn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1599638871926,"user_tz":-540,"elapsed":1629,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"af675b10-5c16-4f4f-e015-8e5de7126b4d"},"source":["# torch.device\n","print(\"is there cuda? :\",  torch.cuda.is_available())\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["is there cuda? : True\n","cuda:0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HL3wzFYATEGN","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599638881169,"user_tz":-540,"elapsed":4997,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' data load '''\n","download_root = '../data'\n","# Normalize data with mean=0.5, std=1.0\n","mnist_transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=(0.5,), std=(1.0,))\n","])\n","\n","# 60000 if train=True, 60000. else 10000.\n","train_data = MNIST(download_root, transform=mnist_transform, train=True, download=True)\n","test_data = MNIST(download_root, transform=mnist_transform, train=False, download=True)\n","\n","# 위 데이터를 batch size로 나눴구나\n","batch_size = 50\n","# 938 = int(60000/batch_size)\n","train_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True)\n","test_loader = DataLoader(dataset=test_data, batch_size=batch_size, shuffle=True)\n","\n","# if you wanna pick one sample\n","# example_mini_batch_img, example_mini_batch_label  = next(iter(train_loader))\n","# print(example_mini_batch_img.shape)  # torch.Size([batch_size, 1, 28, 28])"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"W5nQY_IAS-tH","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599638939680,"user_tz":-540,"elapsed":971,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' Build Network, CNN '''\n","class CNN_Net(nn.Module):\n","    def __init__(self, p=0.0):\n","        super(CNN_Net, self).__init__()\n","\n","        # MNIST 는 정형화되어있잖아, 직사각형 input도 다뤄볼 줄 알아야해.\n","\n","        # L1 ImgIn shape=(?, 28, 28, 1)\n","        #    Conv     -> (?, 28, 28, 32)\n","        #    Pool     -> (?, 14, 14, 32)\n","        self.conv_layer1 = nn.Sequential(\n","            nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2))\n","        \n","        # L2 ImgIn shape=(?, 14, 14, 32)\n","        #    Conv      ->(?, 14, 14, 64)\n","        #    Pool      ->(?, 7, 7, 64)\n","        self.conv_layer2 = nn.Sequential(\n","            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2))\n","        \n","        # L3 ImgIn shape=(?, 7, 7, 64)\n","        #    Conv      ->(?, 7, 7, 128)\n","        #    Pool      ->(?, 4, 4, 128)\n","        self.conv_layer3 = nn.Sequential(\n","            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2, padding=1))\n","\n","        self.before_fc1 = nn.Linear(4 * 4 * 128, 625, bias=True) # 계산하는거 맞네!\n","        nn.init.xavier_uniform_(self.before_fc1.weight)\n","\n","        # FC1 4x4x128 inputs -> 625 outputs\n","        self.fc1 = nn.Sequential(\n","            self.before_fc1,  \n","            nn.ReLU(),\n","            nn.Dropout(p=p))\n","        \n","        # FC2 625 inputs -> 10 outputs\n","        self.fc2 = nn.Linear(625, 10, bias=True)\n","        nn.init.xavier_uniform_(self.fc2.weight)\n","\n","    def forward(self, x):\n","        x = x.float()\n","        out = self.conv_layer1(x)\n","        out = self.conv_layer2(out)\n","        out = self.conv_layer3(out)\n","        out = out.view(out.size(0), -1)   # Flatten them for FC\n","        out = self.fc1(out)\n","        out = self.fc2(out)\n","\n","        out = nn.LogSoftmax(dim=-1)(out)\n","        return out"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"bkn6D2YBTIrt","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599638950577,"user_tz":-540,"elapsed":9109,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' hyper parameters '''\n","# total_batch_num = int(len(train_data) / batch_size)\n","epochs = 20\n","lr = 0.001\n","print_interval = 100\n","drop_prob = 0.2 # 0.2 # 0=적용 안함. -> 모델에서도 빼줌..\n","\n","# model, optimizer 초기화\n","model = CNN_Net(p=drop_prob).to(device)  # train 코드에서 모듈 model 호출될 때마다 forward 자동 실행!\n","optimizer = optim.Adam(model.parameters(), lr=lr)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"dyYfNvD-Euli","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599638960520,"user_tz":-540,"elapsed":1551,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"36104517-e7ec-4b80-b54c-8ea3330f6607"},"source":["cnt = 0\n","num_test_img = 1\n","for batch_idx, (x, target) in enumerate(test_loader):  \n","    if batch_idx > 0 : # 일부만 확인할거임\n","        break\n","    for b in range(batch_size):\n","        if cnt >= num_test_img :\n","            break\n","        img = x[b]\n","        print(img.size())\n","        cnt += 1"],"execution_count":13,"outputs":[{"output_type":"stream","text":["torch.Size([1, 28, 28])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hqqquQIATbnd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":521},"executionInfo":{"status":"ok","timestamp":1599638962797,"user_tz":-540,"elapsed":1016,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"effe1570-f720-4178-c4d6-c71874f46ad0"},"source":["summary(model,input_size=(1, 28, 28))  # input_size=(channels, H, W) -> DNN이랑 달라?"],"execution_count":14,"outputs":[{"output_type":"stream","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1           [-1, 32, 28, 28]             320\n","              ReLU-2           [-1, 32, 28, 28]               0\n","         MaxPool2d-3           [-1, 32, 14, 14]               0\n","            Conv2d-4           [-1, 64, 14, 14]          18,496\n","              ReLU-5           [-1, 64, 14, 14]               0\n","         MaxPool2d-6             [-1, 64, 7, 7]               0\n","            Conv2d-7            [-1, 128, 7, 7]          73,856\n","              ReLU-8            [-1, 128, 7, 7]               0\n","         MaxPool2d-9            [-1, 128, 4, 4]               0\n","           Linear-10                  [-1, 625]       1,280,625\n","           Linear-11                  [-1, 625]       1,280,625\n","             ReLU-12                  [-1, 625]               0\n","          Dropout-13                  [-1, 625]               0\n","           Linear-14                   [-1, 10]           6,260\n","================================================================\n","Total params: 2,660,182\n","Trainable params: 2,660,182\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.00\n","Forward/backward pass size (MB): 0.78\n","Params size (MB): 10.15\n","Estimated Total Size (MB): 10.93\n","----------------------------------------------------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PbtWJOqpxMWa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1599638969326,"user_tz":-540,"elapsed":899,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"2b1fb4c0-07da-4265-feb1-07db3a1299ea"},"source":["# 모델의 state_dict 출력\n","for param_tensor in model.state_dict():\n","    print(param_tensor, \"\\t\", model.state_dict()[param_tensor].size())\n","    # model.state_dict()[param_tensor].dat => 접근가능하네!\n","# 옵티마이저의 state_dict 출력\n","print(\"Optimizer's state_dict:\")\n","for var_name in optimizer.state_dict():\n","    print(var_name, \"\\t\", optimizer.state_dict()[var_name])"],"execution_count":15,"outputs":[{"output_type":"stream","text":["conv_layer1.0.weight \t torch.Size([32, 1, 3, 3])\n","conv_layer1.0.bias \t torch.Size([32])\n","conv_layer2.0.weight \t torch.Size([64, 32, 3, 3])\n","conv_layer2.0.bias \t torch.Size([64])\n","conv_layer3.0.weight \t torch.Size([128, 64, 3, 3])\n","conv_layer3.0.bias \t torch.Size([128])\n","before_fc1.weight \t torch.Size([625, 2048])\n","before_fc1.bias \t torch.Size([625])\n","fc1.0.weight \t torch.Size([625, 2048])\n","fc1.0.bias \t torch.Size([625])\n","fc2.weight \t torch.Size([10, 625])\n","fc2.bias \t torch.Size([10])\n","Optimizer's state_dict:\n","state \t {}\n","param_groups \t [{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iDdPXxZ5TMM9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599639664863,"user_tz":-540,"elapsed":582889,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"31d587b5-d8ba-40f5-bd0c-4700d4940860"},"source":["# 통일성 있게 코드 짜자.\n","train_epoch_loss = []\n","train_epoch_acc = []\n","test_epoch_loss = []\n","test_epoch_acc = []\n","\n","for epoch in range(epochs):\n","\n","    ''' Train '''\n","    model.train()\n","    train_batch_loss = []\n","    train_batch_acc = []\n","    train_batch_num = len(train_loader)\n","    print(\"train_batch_num: \", train_batch_num)\n","    for batch_idx, (x, target) in enumerate(train_loader):\n","        if batch_idx == 0:\n","            print('x.shape', x.shape, 'target.shape', target.shape)  # torch.Size([64, 1, 28, 28]) torch.Size([64])\n","            print(len(train_loader.dataset))  # 60000\n","\n","        x, target = Variable(x).to(device), Variable(target).to(device)\n","        \n","        optimizer.zero_grad()\n","        output = model(x)\n","        loss = F.nll_loss(output, target).to(device)\n","        \n","        loss.backward()    # calc gradients\n","        train_batch_loss.append(loss.item()/batch_size*100) # from tensor -> get value loss.item() or loss.data\n","        optimizer.step()   # update gradients\n","        prediction = output.argmax(dim=1, keepdims=True)\n","        accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","        train_batch_acc.append(accuracy)\n","        if batch_idx % print_interval == 0:\n","            print('epoch: {}\\tbatch Step: {}\\tLoss: {:.3f}\\tAccuracy: {:.3f}'.format(\n","                    epoch, batch_idx, train_batch_loss[batch_idx], train_batch_acc[batch_idx]))\n","\n","    train_epoch_loss.append(np.sum(train_batch_loss)/train_batch_num)\n","    train_epoch_acc.append(np.sum(train_batch_acc)/train_batch_num)\n","\n","\n","    ''' Test '''\n","    model.eval()\n","    test_batch_loss = []\n","    test_batch_acc = []\n","    test_batch_num = len(test_loader)\n","\n","    with torch.no_grad():\n","        for batch_idx, (x, target) in enumerate(test_loader):\n","\n","            x, target = Variable(x).to(device), Variable(target).to(device)\n","            output = model(x)\n","            test_batch_loss.append(loss.item()/batch_size*100)\n","            prediction = output.argmax(dim=1, keepdims=True)\n","            accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","            test_batch_acc.append(accuracy)\n","\n","    test_epoch_loss.append(np.sum(test_batch_loss)/test_batch_num)\n","    test_epoch_acc.append(np.sum(test_batch_acc)/test_batch_num)\n","\n","\n","''' save results to numpy '''\n","train_test_result = (train_epoch_loss, test_epoch_loss, train_epoch_acc, test_epoch_acc)\n","np.save(\"result.npy\", train_test_result)\n","\n","print(\"==================================\")\n","print(\"train_epoch_loss:\", train_epoch_loss)\n","print(\"test_epoch_loss:\", test_epoch_loss)\n","print(\"train_epoch_acc\", train_epoch_acc)\n","print(\"test_epoch_acc\", test_epoch_acc)\n","print(\"==================================\")\n","x = np.arange(start=1, stop=len(train_epoch_loss)+1, step=1)\n","\n","fig = plt.figure(figsize=(12, 3))\n","ax1 = fig.add_subplot(1, 2, 1)\n","plt.plot(x, train_epoch_loss, label='train')\n","plt.plot(x, test_epoch_loss, label='test')\n","ax1.legend()\n","ax1.set(ylabel=\"Loss\", xlabel='epoch')\n","\n","ax2 = fig.add_subplot(1, 2, 2)\n","plt.plot(x, train_epoch_acc, label='train')\n","plt.plot(x, test_epoch_acc, label='test')\n","ax2.legend()\n","ax2.set(ylabel=\"Accuracy\", xlabel='epoch')\n","\n","plt.show()\n","\n","# ''' inference를 위한 모델 저장  '''\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./CNN\"\n","option = 2\n","\n","if option == 0:\n","    model_path = model_name + '_all.pt'\n","    torch.save(model, model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    torch.save(model.state_dict, model_path)\n","\n","elif option == 2:\n","    model_path = model_name + '_ckp.tar'\n","    torch.save({\n","            'last_epoch': epochs -1,\n","            'model_state_dict': model.state_dict(),\n","            'optimizer_state_dict': optimizer.state_dict(),\n","            'loss': loss,\n","            }, model_path)\n","    "],"execution_count":17,"outputs":[{"output_type":"stream","text":["train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 0\tbatch Step: 0\tLoss: 0.133\tAccuracy: 98.000\n","epoch: 0\tbatch Step: 100\tLoss: 0.352\tAccuracy: 94.000\n","epoch: 0\tbatch Step: 200\tLoss: 0.040\tAccuracy: 100.000\n","epoch: 0\tbatch Step: 300\tLoss: 0.036\tAccuracy: 100.000\n","epoch: 0\tbatch Step: 400\tLoss: 0.180\tAccuracy: 98.000\n","epoch: 0\tbatch Step: 500\tLoss: 0.101\tAccuracy: 98.000\n","epoch: 0\tbatch Step: 600\tLoss: 0.065\tAccuracy: 98.000\n","epoch: 0\tbatch Step: 700\tLoss: 0.105\tAccuracy: 98.000\n","epoch: 0\tbatch Step: 800\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 0\tbatch Step: 900\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 0\tbatch Step: 1000\tLoss: 0.017\tAccuracy: 100.000\n","epoch: 0\tbatch Step: 1100\tLoss: 0.280\tAccuracy: 94.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 1\tbatch Step: 0\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 100\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 200\tLoss: 0.034\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 300\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 400\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 500\tLoss: 0.051\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 600\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 700\tLoss: 0.212\tAccuracy: 96.000\n","epoch: 1\tbatch Step: 800\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 900\tLoss: 0.361\tAccuracy: 94.000\n","epoch: 1\tbatch Step: 1000\tLoss: 0.392\tAccuracy: 96.000\n","epoch: 1\tbatch Step: 1100\tLoss: 0.032\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 2\tbatch Step: 0\tLoss: 0.017\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 100\tLoss: 0.083\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 200\tLoss: 0.046\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 300\tLoss: 0.257\tAccuracy: 94.000\n","epoch: 2\tbatch Step: 400\tLoss: 0.017\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 500\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 600\tLoss: 0.013\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 700\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 800\tLoss: 0.124\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 900\tLoss: 0.020\tAccuracy: 100.000\n","epoch: 2\tbatch Step: 1000\tLoss: 0.035\tAccuracy: 98.000\n","epoch: 2\tbatch Step: 1100\tLoss: 0.106\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 3\tbatch Step: 0\tLoss: 0.010\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 100\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 200\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 300\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 400\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 500\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 600\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 700\tLoss: 0.065\tAccuracy: 98.000\n","epoch: 3\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 900\tLoss: 0.689\tAccuracy: 94.000\n","epoch: 3\tbatch Step: 1000\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 3\tbatch Step: 1100\tLoss: 0.003\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 4\tbatch Step: 0\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 100\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 200\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 300\tLoss: 0.048\tAccuracy: 98.000\n","epoch: 4\tbatch Step: 400\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 500\tLoss: 0.008\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 600\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 700\tLoss: 0.027\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 800\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 900\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 1000\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 4\tbatch Step: 1100\tLoss: 0.131\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 5\tbatch Step: 0\tLoss: 0.035\tAccuracy: 98.000\n","epoch: 5\tbatch Step: 100\tLoss: 0.027\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 200\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 300\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 400\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 500\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 600\tLoss: 0.045\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 700\tLoss: 0.093\tAccuracy: 98.000\n","epoch: 5\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 900\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 1000\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 5\tbatch Step: 1100\tLoss: 0.649\tAccuracy: 94.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 6\tbatch Step: 0\tLoss: 0.016\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 100\tLoss: 0.012\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 200\tLoss: 0.010\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 300\tLoss: 0.025\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 400\tLoss: 0.016\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 500\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 600\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 700\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 800\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 900\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 1000\tLoss: 0.013\tAccuracy: 100.000\n","epoch: 6\tbatch Step: 1100\tLoss: 0.002\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 7\tbatch Step: 0\tLoss: 0.009\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 200\tLoss: 0.023\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 300\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 400\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 500\tLoss: 0.011\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 700\tLoss: 0.121\tAccuracy: 98.000\n","epoch: 7\tbatch Step: 800\tLoss: 0.014\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 900\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 1000\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 7\tbatch Step: 1100\tLoss: 0.003\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 8\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 100\tLoss: 0.079\tAccuracy: 98.000\n","epoch: 8\tbatch Step: 200\tLoss: 0.103\tAccuracy: 96.000\n","epoch: 8\tbatch Step: 300\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 400\tLoss: 0.019\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 500\tLoss: 0.014\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 800\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 900\tLoss: 0.014\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 1000\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 8\tbatch Step: 1100\tLoss: 0.000\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 9\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 100\tLoss: 0.099\tAccuracy: 98.000\n","epoch: 9\tbatch Step: 200\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 300\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 400\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 600\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 700\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 900\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 1000\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 9\tbatch Step: 1100\tLoss: 0.057\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 10\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 200\tLoss: 0.011\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 300\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 400\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 500\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 600\tLoss: 0.011\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 800\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 900\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 10\tbatch Step: 1000\tLoss: 0.158\tAccuracy: 98.000\n","epoch: 10\tbatch Step: 1100\tLoss: 0.001\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 11\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 200\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 300\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 400\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 700\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 900\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 1000\tLoss: 0.006\tAccuracy: 100.000\n","epoch: 11\tbatch Step: 1100\tLoss: 0.033\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 12\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 200\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 300\tLoss: 0.045\tAccuracy: 98.000\n","epoch: 12\tbatch Step: 400\tLoss: 0.040\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 600\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 700\tLoss: 0.012\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 800\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 900\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 1000\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 12\tbatch Step: 1100\tLoss: 0.001\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 13\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 200\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 300\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 400\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 600\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 900\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 1000\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 13\tbatch Step: 1100\tLoss: 0.034\tAccuracy: 98.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 14\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 100\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 200\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 300\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 400\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 500\tLoss: 0.079\tAccuracy: 98.000\n","epoch: 14\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 700\tLoss: 0.007\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 800\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 900\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 1000\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 14\tbatch Step: 1100\tLoss: 0.000\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 15\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 200\tLoss: 0.003\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 300\tLoss: 0.051\tAccuracy: 98.000\n","epoch: 15\tbatch Step: 400\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 500\tLoss: 0.005\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 600\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 900\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 1000\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 15\tbatch Step: 1100\tLoss: 0.000\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 16\tbatch Step: 0\tLoss: 0.098\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 200\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 300\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 400\tLoss: 0.206\tAccuracy: 98.000\n","epoch: 16\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 600\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 800\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 900\tLoss: 0.002\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 1000\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 16\tbatch Step: 1100\tLoss: 0.003\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 17\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 200\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 300\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 400\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 500\tLoss: 0.073\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 800\tLoss: 0.121\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 900\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 1000\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 17\tbatch Step: 1100\tLoss: 0.008\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 18\tbatch Step: 0\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 100\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 200\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 300\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 400\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 500\tLoss: 0.001\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 700\tLoss: 0.033\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 800\tLoss: 0.190\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 900\tLoss: 0.123\tAccuracy: 98.000\n","epoch: 18\tbatch Step: 1000\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 1100\tLoss: 0.024\tAccuracy: 100.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 19\tbatch Step: 0\tLoss: 0.122\tAccuracy: 98.000\n","epoch: 19\tbatch Step: 100\tLoss: 0.013\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 200\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 300\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 400\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 500\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 600\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 700\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 800\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 900\tLoss: 0.000\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 1000\tLoss: 0.004\tAccuracy: 100.000\n","epoch: 19\tbatch Step: 1100\tLoss: 0.001\tAccuracy: 100.000\n","==================================\n","train_epoch_loss: [0.08778457100500721, 0.06349649382217346, 0.04804088494461212, 0.03936195427025268, 0.03295401484601371, 0.027993167888672968, 0.024603890182268818, 0.018445065893975918, 0.020010975688500045, 0.015695482348348312, 0.01576448954711849, 0.014703877340164172, 0.0145263784928398, 0.01348393107650152, 0.012780623902418568, 0.010488727027164434, 0.015331562593769048, 0.007151831469631338, 0.012984612776388392, 0.0112633242058715]\n","test_epoch_loss: [0.09483835846185684, 0.08865725249052048, 0.31327229738235474, 0.07964227348566055, 0.019461169838905334, 0.07619960606098175, 0.0022938477341085672, 0.0693536028265953, 0.00037542328936979175, 0.0021320823580026627, 0.1714717149734497, 3.986762749264017e-05, 0.006354035343974829, 0.05547462031245231, 1.668927183118285e-07, 0.03321756049990654, 9.918301657307893e-05, 1.859661296066406e-07, 6.651206058450043e-05, 0.0003538337768986821]\n","train_epoch_acc [tensor(98.6600, device='cuda:0'), tensor(99.0283, device='cuda:0'), tensor(99.2383, device='cuda:0'), tensor(99.3900, device='cuda:0'), tensor(99.4700, device='cuda:0'), tensor(99.5383, device='cuda:0'), tensor(99.6183, device='cuda:0'), tensor(99.7050, device='cuda:0'), tensor(99.6817, device='cuda:0'), tensor(99.7367, device='cuda:0'), tensor(99.7600, device='cuda:0'), tensor(99.7683, device='cuda:0'), tensor(99.7567, device='cuda:0'), tensor(99.7750, device='cuda:0'), tensor(99.7933, device='cuda:0'), tensor(99.8350, device='cuda:0'), tensor(99.7517, device='cuda:0'), tensor(99.8950, device='cuda:0'), tensor(99.8217, device='cuda:0'), tensor(99.8483, device='cuda:0')]\n","test_epoch_acc [tensor(98.7400, device='cuda:0'), tensor(98.7400, device='cuda:0'), tensor(98.8100, device='cuda:0'), tensor(98.9400, device='cuda:0'), tensor(99.2400, device='cuda:0'), tensor(99.2300, device='cuda:0'), tensor(99.1900, device='cuda:0'), tensor(99.1100, device='cuda:0'), tensor(99.2100, device='cuda:0'), tensor(99.2200, device='cuda:0'), tensor(99.2100, device='cuda:0'), tensor(99.2200, device='cuda:0'), tensor(99.2300, device='cuda:0'), tensor(99.3400, device='cuda:0'), tensor(99.1500, device='cuda:0'), tensor(99.0300, device='cuda:0'), tensor(99.1700, device='cuda:0'), tensor(99.1600, device='cuda:0'), tensor(99.0800, device='cuda:0'), tensor(99.3700, device='cuda:0')]\n","==================================\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 864x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"J31wFkZzZviK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1599549612488,"user_tz":-540,"elapsed":1334,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"5e1e7827-fc10-45cb-ac75-08b435941510"},"source":["''' 모델 불러오기 '''\n","\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./CNN\"\n","option = 2\n","\n","if option == 0:\n","    # 모델 클래스는 어딘가에 반드시 선언되어 있어야 합니다\n","    model_path = model_name + '_all.pt'\n","    model = torch.load(model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    model = CNN_Net()\n","    model.load_state_dict(torch.load(model_path))\n","\n","elif option == 2:\n","    # model, optimizer 초기화\n","    model = CNN_Net()\n","    optimizer = optim.Adam(model.parameters(), lr=lr)\n","\n","    model_path = model_name + '_ckp.tar'\n","    checkpoint = torch.load(model_path)\n","    model.load_state_dict(checkpoint['model_state_dict'])\n","    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n","    last_epoch = checkpoint['last_epoch']\n","    loss = checkpoint['loss']\n","\n","\n","''' Plot Test '''\n","model.eval()\n","test_batch_loss = []\n","test_batch_acc = []\n","test_batch_num = len(test_loader)\n","\n","num_test_img = 8\n","cnt = 0\n","fig_test = plt.figure(figsize=(12, 8))\n","with torch.no_grad():\n","    for batch_idx, (x, target) in enumerate(test_loader):  \n","        if batch_idx > 0 : # 일부만 확인할거임\n","            break\n","        for b in range(batch_size):\n","            if cnt >= num_test_img :\n","                break\n","            img = x[b]\n","            output = model(img)\n","            prediction = output.argmax(dim=1, keepdims = False).item()\n","            subplt = fig_test.add_subplot(2, 4, b + 1)\n","            subplt.set_title(\"prediction : %d\" % prediction)\n","            subplt.imshow(img.reshape((28, 28)), cmap=plt.cm.gray_r)\n","\n","            cnt += 1\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 8 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"qCR-8qxc_9ZR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599539884529,"user_tz":-540,"elapsed":802,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"65f85fab-130d-4a16-bc54-999494781449"},"source":["'''trainable parameter 확인'''\n","param_dict = {}\n","for param_tensor in model.state_dict():\n","    param_dict[param_tensor] = model.state_dict()[param_tensor]\n","    print(param_tensor, model.state_dict()[param_tensor].size())\n","\n","print(\"========================\")\n","print(param_dict)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fc1.weight torch.Size([512, 784])\n","fc1.bias torch.Size([512])\n","fc2.weight torch.Size([256, 512])\n","fc2.bias torch.Size([256])\n","fc3.weight torch.Size([128, 256])\n","fc3.bias torch.Size([128])\n","fc4.weight torch.Size([64, 128])\n","fc4.bias torch.Size([64])\n","fc5.weight torch.Size([32, 64])\n","fc5.bias torch.Size([32])\n","fc6.weight torch.Size([10, 32])\n","fc6.bias torch.Size([10])\n","{'fc1.weight': tensor([[ 0.0178, -0.0313,  0.0153,  ...,  0.0320, -0.0134, -0.0018],\n","        [ 0.0103, -0.0084,  0.0005,  ...,  0.0436, -0.0225,  0.0307],\n","        [-0.0057,  0.0106, -0.0169,  ...,  0.0303,  0.0247,  0.0242],\n","        ...,\n","        [-0.0181, -0.0010, -0.0074,  ..., -0.0161, -0.0292, -0.0012],\n","        [-0.0268, -0.0010, -0.0125,  ...,  0.0367,  0.0395, -0.0041],\n","        [ 0.0048,  0.0135,  0.0201,  ...,  0.0145,  0.0290,  0.0299]]), 'fc1.bias': tensor([ 2.7251e-02, -1.0061e-02, -2.5854e-02,  6.2849e-03,  1.5628e-02,\n","         2.3756e-02, -6.7040e-03,  5.9113e-03, -1.6234e-02, -1.7354e-02,\n","        -1.4856e-02, -2.3461e-02, -2.5815e-02, -2.2201e-02, -1.3855e-02,\n","         1.3635e-02,  1.6872e-02,  2.9144e-02, -1.0693e-03,  3.2511e-03,\n","        -2.1241e-02, -1.2595e-02,  1.3324e-02, -1.7020e-02, -5.3032e-03,\n","        -3.6009e-02,  1.0602e-02, -3.3771e-02, -1.8142e-02,  7.1262e-03,\n","        -2.6052e-03, -2.3137e-02, -2.7401e-02,  3.7765e-02,  2.6412e-02,\n","        -3.2114e-02, -3.1320e-02,  1.3542e-02,  1.4125e-02, -8.1648e-03,\n","        -1.9232e-02, -2.9148e-02,  1.7345e-02, -4.0122e-02,  1.1418e-02,\n","        -4.8806e-03,  2.4100e-02, -2.5301e-02, -4.0003e-02, -3.3719e-02,\n","        -5.5979e-03, -2.2995e-02, -3.1285e-02, -9.6948e-03,  6.6422e-03,\n","         3.6996e-02, -8.6475e-04,  2.3025e-03,  9.9211e-03,  1.2195e-02,\n","         7.9100e-03, -3.3380e-02, -9.8379e-03,  8.2824e-03,  2.4071e-02,\n","         2.7192e-03,  1.7161e-02,  7.3289e-03, -1.5759e-02, -8.4321e-03,\n","         3.1429e-02,  1.0661e-02,  2.7307e-02,  9.5111e-03, -1.7599e-02,\n","        -2.7174e-02,  2.2271e-02, -3.4319e-03, -1.0927e-02,  2.7706e-02,\n","         4.8659e-02,  9.1367e-03,  1.0440e-02,  2.1903e-02, -1.4481e-02,\n","        -2.9201e-02, -2.6770e-03,  3.2634e-02, -4.0190e-02,  5.1243e-03,\n","         5.5679e-03,  4.5742e-03, -4.4868e-02, -2.6678e-02, -2.6332e-02,\n","        -3.7017e-02, -1.6915e-02,  2.5851e-02, -3.9080e-02, -5.8470e-03,\n","         2.0913e-04, -3.3049e-02,  3.5134e-03,  5.8118e-03, -1.9446e-02,\n","        -2.8620e-02, -1.8411e-02, -1.7265e-02, -1.1051e-02,  1.8334e-02,\n","         2.0184e-02, -2.8114e-02,  2.7433e-02,  1.1335e-02, -2.0062e-02,\n","        -4.3127e-02, -3.4886e-02,  8.1593e-03,  3.5572e-02,  7.5644e-03,\n","         3.8515e-02, -2.3176e-02,  8.9962e-03,  3.2870e-02,  3.0654e-02,\n","        -9.1970e-03, -3.2105e-02, -8.6257e-03,  1.3190e-03,  1.8026e-02,\n","         8.8748e-03, -2.9373e-02, -4.2226e-02,  1.7107e-02, -3.6465e-02,\n","        -5.2494e-05,  1.1396e-02,  1.7483e-03, -1.6486e-02,  1.7306e-02,\n","         2.6923e-02,  5.3818e-03,  7.2390e-03, -3.3929e-02, -2.7271e-02,\n","        -3.8692e-02, -7.4436e-03, -3.0543e-02, -7.8009e-03, -1.4770e-04,\n","         1.1598e-02,  2.5480e-02,  8.5923e-03, -3.6370e-02,  2.8532e-02,\n","         1.8016e-02, -6.3621e-03, -9.4856e-04, -2.6520e-02, -6.6878e-03,\n","        -1.6452e-03, -2.0050e-02, -3.2513e-02,  9.3294e-03,  1.3656e-02,\n","         1.1389e-02, -3.6471e-02,  2.6099e-02, -1.6945e-02,  1.2633e-02,\n","         1.6327e-03, -1.7226e-02, -3.9648e-02,  1.3555e-02,  2.0147e-02,\n","         3.1621e-02, -1.8539e-02,  2.0590e-03, -4.0774e-02, -8.6576e-03,\n","         1.7031e-02, -3.7982e-02, -3.7905e-03, -1.4786e-02, -2.1475e-02,\n","         9.2544e-03,  1.1951e-02, -6.3608e-03,  3.1636e-02, -2.5704e-03,\n","        -1.2651e-02, -1.6660e-02,  1.4529e-02, -1.8602e-02, -6.1310e-03,\n","        -2.2195e-02, -3.2423e-02, -8.0736e-03, -1.0083e-02,  5.2343e-03,\n","        -3.0535e-02,  1.0548e-02, -9.9932e-03,  1.5233e-02, -2.9542e-02,\n","         1.3064e-02, -2.0917e-03,  1.1958e-02, -2.4411e-02, -1.0155e-02,\n","        -3.8325e-02, -1.4549e-02, -1.8294e-02, -1.6993e-02, -1.8072e-02,\n","        -6.3406e-03,  1.3397e-02, -1.0063e-02, -3.8491e-02, -3.0579e-03,\n","        -4.0200e-02, -3.1337e-02,  5.7688e-04, -1.7042e-02, -7.8795e-03,\n","        -3.9376e-02,  1.0633e-03, -3.6253e-03,  2.3157e-02,  1.8883e-02,\n","         2.7385e-02, -2.5085e-02,  2.8175e-03, -2.0150e-02, -2.8004e-02,\n","         2.0715e-02,  2.5830e-02,  1.1116e-02, -3.9769e-02, -1.0140e-02,\n","        -1.0983e-02, -2.2346e-02, -4.3689e-02, -4.1273e-02, -7.8916e-03,\n","         2.4338e-02, -2.1364e-03, -1.6887e-02, -3.9079e-02, -1.6778e-02,\n","        -3.6258e-02, -1.8561e-02, -1.4165e-02, -1.3699e-02,  2.9805e-02,\n","        -6.2933e-03, -3.6591e-02, -3.4981e-02,  1.1407e-02, -4.5124e-03,\n","        -2.4821e-02,  1.7494e-02,  1.2629e-02, -3.5249e-02,  7.9583e-03,\n","        -3.3363e-02, -1.6982e-03, -1.4062e-02,  1.2132e-02,  1.1908e-02,\n","        -1.4540e-03, -1.5794e-03,  4.0714e-02, -1.4594e-02, -3.9485e-02,\n","        -1.0249e-02, -3.6754e-02,  6.8387e-03, -3.2269e-02, -4.0618e-02,\n","        -2.6772e-02, -1.9310e-02, -3.3071e-02,  1.2437e-04, -3.6596e-02,\n","         1.4059e-02,  3.1238e-02,  1.3149e-02, -5.7187e-03,  1.8620e-02,\n","        -2.7887e-02, -1.2835e-02, -2.1285e-02, -2.3794e-02, -3.7962e-02,\n","         1.0469e-02,  3.8574e-03,  2.6785e-02, -1.1643e-04, -2.8093e-02,\n","        -2.9444e-02,  1.2947e-02,  1.0840e-02, -1.7038e-02, -3.8349e-02,\n","         1.7700e-02,  1.1633e-03,  1.9315e-02,  1.6913e-02,  5.8847e-03,\n","        -3.1744e-02, -2.9608e-02,  1.0485e-02, -3.3740e-02, -3.4967e-02,\n","        -1.6555e-02, -1.2025e-02, -1.3818e-02, -9.4697e-03,  2.3243e-03,\n","        -2.2179e-02, -2.0214e-02,  6.2034e-03,  7.5203e-03,  1.4817e-02,\n","         8.9318e-03,  1.6486e-02, -3.1757e-02, -1.1042e-03, -1.3452e-02,\n","        -3.3927e-02, -3.2521e-02, -4.1341e-02, -1.9326e-02, -1.6641e-02,\n","        -2.7685e-02, -2.9617e-02, -3.1234e-02, -9.1539e-03, -2.4311e-02,\n","        -7.2858e-03, -3.1706e-03, -1.2505e-03, -3.0680e-02,  2.2704e-02,\n","        -1.4030e-02, -1.1391e-02,  1.2285e-02, -3.4763e-02,  6.3538e-03,\n","        -1.7100e-02, -3.7603e-02,  6.6790e-03, -2.2992e-02, -1.6647e-02,\n","         1.4163e-03,  3.1375e-02, -1.1375e-02, -1.0576e-02,  1.5358e-02,\n","         1.4961e-02, -2.1890e-02,  1.7398e-02,  7.0889e-03,  1.1865e-02,\n","         1.1509e-02, -4.2301e-02,  2.9724e-02,  2.1033e-02,  3.1255e-02,\n","        -1.2264e-02,  9.8400e-03, -5.3306e-03,  9.8042e-03,  2.3563e-02,\n","         7.3225e-03, -9.9824e-03, -4.1299e-02,  4.2191e-03, -3.5565e-02,\n","        -6.4189e-03,  2.0560e-02, -2.5204e-02, -2.3034e-02,  5.9475e-03,\n","        -7.7960e-03, -1.9296e-03,  1.1221e-02, -2.3746e-02,  1.3760e-03,\n","        -2.6706e-02,  9.4120e-03,  1.6917e-02, -1.4817e-02, -8.6255e-03,\n","         4.2188e-04,  2.9923e-03,  6.2891e-03,  1.1935e-02, -9.9409e-03,\n","        -5.4050e-02, -5.6509e-03,  2.2741e-02, -3.6742e-02,  2.3763e-02,\n","         7.8912e-03, -1.6871e-02,  1.1891e-02, -3.9710e-02,  3.9079e-02,\n","         1.5333e-03, -1.1567e-02, -1.2752e-02,  1.7687e-02, -1.8838e-02,\n","        -6.8656e-03, -2.5961e-02,  2.0550e-02, -3.0601e-02,  1.3059e-02,\n","         1.5365e-02, -3.9238e-02,  1.2206e-02, -2.8783e-03,  2.6426e-02,\n","        -3.2795e-02, -1.4938e-03, -2.5552e-02,  2.1762e-02,  1.8620e-02,\n","         1.4587e-02,  5.3979e-03,  4.8173e-02, -2.3764e-03, -1.4374e-02,\n","        -1.3721e-02, -3.2335e-02,  1.9149e-02, -6.2191e-03, -7.0779e-03,\n","         2.1650e-02,  2.6612e-02,  8.3014e-03, -1.8274e-03,  6.9358e-03,\n","         1.2351e-02, -3.7795e-02,  1.7008e-02,  4.9989e-03, -1.1518e-02,\n","        -4.0082e-02, -8.8722e-03, -2.9230e-02,  2.2661e-02,  1.0057e-02,\n","         2.8604e-02, -2.5754e-02,  1.2474e-02,  1.8676e-02,  3.3181e-02,\n","        -3.5164e-02,  1.0119e-02, -2.0524e-02,  1.8579e-02, -2.7482e-02,\n","         5.7252e-03, -3.3228e-02, -2.8320e-02, -4.7514e-03,  1.7292e-02,\n","        -4.2521e-03, -2.0041e-02, -2.8292e-02, -3.6636e-02, -1.7062e-02,\n","        -1.8064e-02,  9.4015e-03, -1.1034e-03, -3.1597e-02, -2.9097e-02,\n","        -1.7289e-02, -3.4953e-02, -1.6839e-02,  7.1778e-03, -1.4076e-03,\n","        -2.2553e-02,  1.9369e-02,  4.8847e-03, -7.0146e-03, -6.5679e-03,\n","        -2.3222e-02, -3.5899e-02,  1.0371e-02, -1.9182e-02,  2.7823e-02,\n","         2.2234e-02,  2.1665e-02, -3.9149e-02,  2.0112e-03, -2.9730e-02,\n","        -5.0181e-02,  2.8793e-02, -9.5061e-03, -9.6208e-03, -1.9672e-02,\n","        -3.4069e-03, -4.3966e-02,  2.8360e-02, -2.1068e-02, -1.5341e-03,\n","        -2.1919e-02,  1.0906e-02]), 'fc2.weight': tensor([[ 0.0556, -0.0266, -0.0517,  ...,  0.0582, -0.0384,  0.0051],\n","        [-0.0457, -0.0137, -0.0341,  ..., -0.0067, -0.0178,  0.0279],\n","        [ 0.0177, -0.0044, -0.0482,  ..., -0.0433, -0.0245,  0.0017],\n","        ...,\n","        [-0.0236,  0.0359, -0.0609,  ..., -0.0566, -0.0369, -0.0213],\n","        [ 0.0947, -0.0174,  0.0753,  ...,  0.0218,  0.0420,  0.0044],\n","        [-0.0077,  0.0432, -0.0374,  ...,  0.0346,  0.0103, -0.0402]]), 'fc2.bias': tensor([ 0.0751,  0.0039, -0.0366,  0.0287, -0.0042,  0.0165, -0.0479, -0.0221,\n","         0.0375, -0.0618,  0.0375,  0.0299,  0.0092, -0.0388,  0.0096, -0.0452,\n","        -0.0262,  0.0079, -0.0173, -0.0590, -0.0322,  0.0053, -0.0345,  0.0042,\n","         0.0085,  0.0442,  0.0397,  0.0100,  0.0493,  0.0586,  0.0391, -0.0148,\n","        -0.0261,  0.0365,  0.0275, -0.0620,  0.0308,  0.0414, -0.0185,  0.0101,\n","         0.0373, -0.0161, -0.0231,  0.0072,  0.0621, -0.0162, -0.0552, -0.0120,\n","         0.0009,  0.0382,  0.0116, -0.0454, -0.0065, -0.0116, -0.0280,  0.0099,\n","         0.0465,  0.0338, -0.0383, -0.0390,  0.0115,  0.0384, -0.0303, -0.0149,\n","        -0.0172,  0.0152,  0.0128,  0.0401,  0.0386, -0.0717,  0.0313, -0.0362,\n","        -0.0541,  0.0498,  0.0082, -0.0949, -0.0099,  0.0715,  0.0387,  0.0086,\n","        -0.0715,  0.0189, -0.0196, -0.0031,  0.0411,  0.0039,  0.0321, -0.0423,\n","        -0.0442, -0.0772,  0.0212,  0.0118,  0.0209,  0.0195,  0.0214, -0.0493,\n","         0.0009,  0.0056,  0.0390,  0.0333, -0.0479,  0.0029, -0.0117,  0.0031,\n","        -0.0272,  0.0426, -0.0135,  0.0393,  0.0298, -0.0084,  0.0580, -0.0029,\n","         0.0606,  0.0033, -0.0196, -0.0255, -0.0051,  0.0198,  0.0406, -0.0628,\n","         0.0299,  0.0561,  0.0495, -0.0294,  0.0473, -0.0437, -0.0162, -0.0077,\n","         0.0522, -0.0470, -0.0489,  0.0810, -0.0408, -0.0949, -0.0469, -0.0595,\n","        -0.0420,  0.0418, -0.0019,  0.0588,  0.0822, -0.0264,  0.0019, -0.0210,\n","         0.0271, -0.0464, -0.0362,  0.0415, -0.0217, -0.0436, -0.0518,  0.0250,\n","         0.0784,  0.0553,  0.0525,  0.0502, -0.0136, -0.0496, -0.0147, -0.0403,\n","         0.0637, -0.0146,  0.0306,  0.0247,  0.0228,  0.0357,  0.0003, -0.0303,\n","         0.0383,  0.0886,  0.0004, -0.0364, -0.0799, -0.0359,  0.0379, -0.0220,\n","         0.0166, -0.0741,  0.0367,  0.0045,  0.0097, -0.0113,  0.0329, -0.0317,\n","        -0.0550, -0.0285,  0.0143,  0.0401,  0.0655,  0.0255,  0.0247, -0.0281,\n","         0.0269,  0.0298, -0.0387,  0.0449,  0.0121,  0.0464,  0.0319,  0.0020,\n","         0.0087,  0.0416, -0.0070,  0.0084,  0.0370, -0.0286, -0.0460, -0.0508,\n","         0.0176,  0.0307, -0.0077,  0.0617, -0.0274, -0.0050, -0.0009, -0.0546,\n","         0.0860,  0.0511, -0.0477, -0.0021,  0.0431, -0.0096, -0.0528, -0.0200,\n","        -0.0419,  0.0025,  0.0309, -0.0113,  0.0355, -0.0311, -0.0087,  0.0411,\n","         0.0966, -0.0847,  0.0712, -0.0237,  0.0789,  0.0310,  0.0328, -0.0646,\n","         0.0001, -0.0057, -0.0605, -0.0150, -0.0179,  0.0140, -0.0163, -0.0054,\n","        -0.0415, -0.0864,  0.0491,  0.0107, -0.0343, -0.0134,  0.0065, -0.0096]), 'fc3.weight': tensor([[ 0.1038, -0.0381,  0.0500,  ...,  0.0083,  0.0714,  0.0314],\n","        [ 0.1088, -0.0506,  0.0381,  ..., -0.0018,  0.0907,  0.0242],\n","        [-0.0380, -0.0528,  0.0307,  ...,  0.0826,  0.0910,  0.0212],\n","        ...,\n","        [-0.0032,  0.0432, -0.0218,  ...,  0.0276,  0.0072,  0.0062],\n","        [ 0.0798,  0.0454,  0.0416,  ...,  0.0307, -0.0303, -0.0259],\n","        [-0.0350,  0.0234, -0.0091,  ...,  0.0200,  0.0476, -0.0235]]), 'fc3.bias': tensor([ 3.1587e-02,  1.0990e-01,  1.0444e-01,  4.4934e-02,  1.0343e-02,\n","         3.0760e-02,  6.4333e-02, -5.5332e-03,  5.7106e-02, -3.8656e-02,\n","         2.6507e-02, -2.2431e-02,  6.6666e-02, -6.9117e-02, -2.0669e-02,\n","        -3.2033e-02,  3.6986e-02, -5.5004e-02,  2.8906e-02,  5.1334e-02,\n","        -4.2837e-02, -2.7165e-02, -4.4392e-02,  5.2775e-04, -2.8654e-02,\n","         6.1982e-02, -8.0293e-02, -7.2299e-02, -2.7080e-02,  4.4977e-02,\n","         9.2804e-02, -7.5983e-02, -4.8806e-02, -2.1275e-02, -5.6693e-02,\n","        -4.0880e-02,  2.2774e-02,  5.0024e-03, -6.6991e-02,  7.2079e-02,\n","        -6.2602e-02, -1.9304e-02,  7.5793e-02,  5.5263e-03,  4.0615e-02,\n","        -8.3545e-02,  4.6470e-02, -5.7885e-02, -2.5989e-02,  7.1092e-02,\n","        -2.6314e-02,  3.0006e-02,  4.9188e-02,  7.2241e-02,  8.1083e-02,\n","        -3.8087e-02,  6.3286e-03,  3.3427e-02, -1.6885e-02, -2.7147e-02,\n","         3.5224e-03,  2.7791e-02,  8.9598e-02,  5.4218e-02,  3.6207e-02,\n","        -3.0238e-02,  4.9961e-02, -1.5594e-02, -2.3378e-03, -2.1838e-02,\n","         1.3180e-02,  4.4086e-02,  5.1162e-03,  6.3101e-02,  1.6388e-02,\n","         8.3341e-02, -5.6922e-02, -7.5757e-02, -9.9623e-02,  4.8752e-02,\n","        -5.4248e-02,  2.1281e-02, -7.5510e-02, -6.0392e-02, -7.0691e-02,\n","         1.4111e-02,  3.4065e-02,  5.9553e-02,  5.0368e-04, -2.2500e-02,\n","        -2.1014e-02, -4.2844e-02, -9.5589e-03,  1.7866e-02,  1.7935e-02,\n","         8.7022e-02, -1.2618e-02,  6.2921e-03,  1.3882e-02, -1.7520e-02,\n","         1.5161e-02, -1.3350e-02,  1.0108e-02,  8.6498e-02,  1.4553e-02,\n","         4.5491e-02,  2.7796e-02, -7.5728e-02,  3.7157e-02, -4.1684e-03,\n","        -5.0073e-03,  7.8102e-02,  9.8698e-02, -8.9487e-02, -5.2289e-02,\n","         8.3856e-05, -3.7017e-02,  6.7913e-02,  4.0090e-02,  3.8580e-02,\n","        -4.6376e-02,  1.5691e-02,  3.4640e-02, -7.3521e-02, -2.0593e-02,\n","         3.3242e-02, -3.6003e-02, -2.3754e-02]), 'fc4.weight': tensor([[ 0.0161, -0.0477, -0.0938,  ..., -0.0656, -0.0514,  0.0121],\n","        [ 0.0847, -0.0046, -0.0931,  ..., -0.0019, -0.0015,  0.0350],\n","        [ 0.0224,  0.0797,  0.0169,  ...,  0.0920,  0.0083,  0.0026],\n","        ...,\n","        [ 0.0801, -0.2164, -0.2435,  ..., -0.0754, -0.0247, -0.0446],\n","        [ 0.0288,  0.0083,  0.0079,  ..., -0.0848, -0.0413,  0.0386],\n","        [ 0.0735,  0.0170,  0.0679,  ...,  0.0221,  0.0388,  0.0857]]), 'fc4.bias': tensor([-0.0598, -0.0089,  0.0092, -0.0173,  0.0419,  0.0839, -0.0123, -0.0273,\n","        -0.0273, -0.0475, -0.0546,  0.0982,  0.0940, -0.1093,  0.0471, -0.0166,\n","         0.0264,  0.0716,  0.0794,  0.0932, -0.0554,  0.0194, -0.0204, -0.0214,\n","         0.0985, -0.0029, -0.0299,  0.1094,  0.1201, -0.0313, -0.0014,  0.0119,\n","         0.0310,  0.0074, -0.0304,  0.0716,  0.0019,  0.1072, -0.0518,  0.0836,\n","         0.0367,  0.0798, -0.0198, -0.0471,  0.0572, -0.0321, -0.0187,  0.0534,\n","         0.0961,  0.0058, -0.0375,  0.0140,  0.0044, -0.0038, -0.0578,  0.0184,\n","         0.1534,  0.0419, -0.0953,  0.1133, -0.0354,  0.0028, -0.0088, -0.0836]), 'fc5.weight': tensor([[-0.0053, -0.0158,  0.0494,  ..., -0.1892, -0.0023,  0.0771],\n","        [-0.1060,  0.1247,  0.1147,  ...,  0.0411,  0.1206,  0.0055],\n","        [ 0.0352, -0.0415, -0.0928,  ..., -0.1336,  0.1018, -0.0955],\n","        ...,\n","        [ 0.1467, -0.0066,  0.0079,  ...,  0.1343,  0.0457, -0.0804],\n","        [ 0.1197,  0.1841,  0.0117,  ..., -0.0851, -0.0430,  0.0515],\n","        [-0.1166,  0.0042, -0.1057,  ..., -0.1000,  0.0468,  0.0284]]), 'fc5.bias': tensor([-0.0885, -0.0390,  0.0916, -0.0370,  0.1009,  0.0556,  0.0793,  0.0873,\n","         0.0528,  0.0763,  0.0350,  0.0211, -0.0192, -0.1216, -0.1094,  0.0805,\n","         0.0169, -0.0726,  0.0213,  0.0530, -0.1013, -0.0896,  0.0627, -0.0423,\n","        -0.0579, -0.1433,  0.0926, -0.0823, -0.0932,  0.1289, -0.0044, -0.1092]), 'fc6.weight': tensor([[ 0.0366, -0.0720, -0.1236, -0.0812,  0.0024, -0.0404,  0.1505, -0.0955,\n","          0.2171, -0.1871, -0.1750,  0.1165, -0.2369,  0.1505,  0.0720, -0.0852,\n","         -0.1447, -0.0421, -0.0669, -0.1769, -0.1755, -0.1338, -0.1066,  0.0922,\n","         -0.1157,  0.1451, -0.2053, -0.1524,  0.0657,  0.1403,  0.0581, -0.1778],\n","        [-0.2318, -0.1332,  0.0308,  0.0216,  0.0409, -0.0719, -0.0039,  0.2217,\n","         -0.1718,  0.0678, -0.0018, -0.0500,  0.0947, -0.0118,  0.1386, -0.0803,\n","         -0.0570, -0.1807,  0.2342,  0.0010, -0.1931,  0.1420, -0.0903, -0.1984,\n","         -0.1493, -0.0322,  0.2462,  0.0991, -0.0799, -0.2072,  0.0573,  0.0995],\n","        [-0.0809,  0.0055,  0.0329,  0.1634, -0.1052, -0.1451, -0.0756, -0.0294,\n","          0.1236,  0.0567, -0.2089, -0.0703, -0.0114,  0.1328, -0.0576,  0.1557,\n","         -0.2038,  0.1072, -0.0493,  0.0892,  0.0355, -0.0325, -0.0342,  0.0829,\n","          0.0084, -0.0149,  0.1300,  0.0215,  0.0082,  0.1719, -0.0485, -0.1026],\n","        [ 0.1747, -0.0899, -0.2280,  0.1112, -0.0503, -0.0388, -0.1129,  0.1852,\n","         -0.0050,  0.0386,  0.0530,  0.0324, -0.1200, -0.0566, -0.0438, -0.0807,\n","         -0.2595,  0.0216,  0.1453, -0.1095, -0.0886, -0.1424,  0.0461, -0.0176,\n","          0.0769,  0.0286, -0.1081, -0.0601, -0.0276, -0.0578,  0.0485, -0.1289],\n","        [-0.1446, -0.0038,  0.0076, -0.0615, -0.2135,  0.1810, -0.0589, -0.1444,\n","         -0.1727,  0.0946,  0.0544, -0.1667,  0.1211, -0.1350,  0.0749,  0.0205,\n","         -0.0709, -0.0092,  0.0438, -0.1176, -0.0573,  0.0293,  0.1626,  0.1672,\n","          0.1545,  0.0874, -0.1131, -0.0487,  0.1125,  0.0868,  0.0234, -0.0738],\n","        [ 0.1618, -0.0293, -0.0486,  0.0013, -0.1018, -0.1964, -0.0223, -0.0703,\n","          0.0489, -0.0491,  0.0938,  0.0753,  0.0844, -0.0916,  0.0981,  0.0639,\n","          0.1380,  0.0449, -0.0568,  0.1290,  0.0332,  0.0888, -0.0734, -0.0469,\n","          0.1543, -0.0310, -0.1298,  0.0235,  0.0258, -0.1805,  0.0915,  0.0564],\n","        [ 0.1082,  0.1754,  0.0273, -0.1889,  0.1705,  0.1507,  0.0747, -0.2008,\n","         -0.0038, -0.0105,  0.1095, -0.1184, -0.0491, -0.0387,  0.0640,  0.0998,\n","          0.0584, -0.1685, -0.0011,  0.0212,  0.1121,  0.0517, -0.2559, -0.1894,\n","          0.1538, -0.0088,  0.0649,  0.0341, -0.2555,  0.0679, -0.0373,  0.0106],\n","        [-0.0864,  0.0703, -0.1391,  0.1618, -0.2502, -0.1180,  0.1715,  0.0658,\n","          0.0217, -0.1198, -0.0117, -0.2261, -0.1666,  0.1125, -0.1378, -0.1425,\n","          0.1681, -0.2964,  0.2083,  0.1152,  0.0076, -0.0878,  0.1844,  0.1116,\n","          0.1595, -0.1618, -0.0600,  0.0886, -0.2288, -0.1143, -0.1640,  0.0597],\n","        [ 0.1166, -0.0212, -0.2080, -0.1133,  0.1593, -0.0065, -0.1555,  0.0263,\n","          0.0527, -0.1611, -0.1358,  0.0184,  0.0690,  0.1217,  0.1345, -0.1044,\n","          0.0448,  0.0163, -0.0448, -0.1482, -0.1820, -0.0098,  0.0896,  0.0816,\n","          0.1293,  0.1024,  0.1914, -0.0570, -0.0656, -0.1847, -0.1668,  0.1371],\n","        [-0.0785,  0.0423,  0.1292,  0.2153, -0.0717,  0.0577, -0.1786, -0.0351,\n","         -0.0585, -0.1803,  0.1647,  0.0856, -0.0086,  0.0172, -0.1300,  0.0541,\n","          0.0758, -0.1080, -0.1706, -0.2912, -0.0723, -0.0819,  0.0739,  0.1568,\n","          0.1144,  0.0963, -0.1366, -0.1542,  0.0997, -0.1912, -0.1272, -0.0628]]), 'fc6.bias': tensor([ 0.1433, -0.0994,  0.1359, -0.1359,  0.0970, -0.0512, -0.0894,  0.1160,\n","        -0.0830, -0.1210])}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gKfimwHbALjd","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}