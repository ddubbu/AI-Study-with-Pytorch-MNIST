{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DNN.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMaReEb/jcSVukEW9a8BcdA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Nz7zDemgQM5m","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599540472417,"user_tz":-540,"elapsed":1454,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"20b83191-417d-4f42-fd23-866979d62f31"},"source":["%pwd"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"1CAUBQkGQ_b5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":131},"executionInfo":{"status":"ok","timestamp":1599540499271,"user_tz":-540,"elapsed":24779,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"36629912-29e7-4765-8905-2b8cc73279cd"},"source":["from google.colab import drive\n","drive.mount('../content/drive', force_remount=True)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at ../content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oFfFh2VA1UvB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599540503891,"user_tz":-540,"elapsed":1204,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"33501141-cc8b-4cac-aac9-2469407b546a"},"source":["cd ../content/drive/My Drive/Pytorch/DNN"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Pytorch/DNN\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P8k_tmSQREIi","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540510221,"user_tz":-540,"elapsed":5374,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' import libraries '''\n","\n","%matplotlib inline\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision.transforms import transforms  # 1 batch = (1, 784)\n","from torchvision.datasets import MNIST\n","from torch.autograd import Variable\n","from torch.utils.data.dataloader import DataLoader\n","from matplotlib import pyplot as plt\n","import numpy as np\n","from torchsummary import summary"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"HL3wzFYATEGN","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540515774,"user_tz":-540,"elapsed":5955,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' data load '''\n","download_root = '../data'\n","# Normalize data with mean=0.5, std=1.0\n","mnist_transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5,), (1.0,))\n","])\n","\n","# 60000 if train=True, 60000. else 10000.\n","train_data = MNIST(download_root, transform=mnist_transform, train=True, download=True)\n","test_data = MNIST(download_root, transform=mnist_transform, train=False, download=True)\n","\n","# 위 데이터를 batch size로 나눴구나\n","batch_size = 50\n","# 938 = int(60000/batch_size)\n","train_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True)\n","test_loader = DataLoader(dataset=test_data, batch_size=batch_size, shuffle=True)\n","\n","# if you wanna pick one sample\n","# example_mini_batch_img, example_mini_batch_label  = next(iter(train_loader))\n","# print(example_mini_batch_img.shape)  # torch.Size([batch_size, 1, 28, 28])"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"W5nQY_IAS-tH","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540522830,"user_tz":-540,"elapsed":1125,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' Build Network, 6 layer DNN '''\n","class DNN_Net(nn.Module):\n","    def __init__(self):\n","        super(DNN_Net, self).__init__()\n","        self.fc1 = nn.Linear(784, 512)  # default, bias=True\n","        self.fc2 = nn.Linear(512, 256)\n","        self.fc3 = nn.Linear(256, 128)\n","        self.fc4 = nn.Linear(128, 64)\n","        self.fc5 = nn.Linear(64, 32)\n","        self.fc6 = nn.Linear(32, 10)  # output = 10\n","\n","    def forward(self, x):\n","        x = x.float()\n","        h1 = F.relu(self.fc1(x.view(-1, 784)))  # push reshape input\n","        h2 = F.relu(self.fc2(h1))\n","        h3 = F.relu(self.fc3(h2))\n","        h4 = F.relu(self.fc4(h3))\n","        h5 = F.relu(self.fc5(h4))\n","        output = F.log_softmax(self.fc6(h5), dim=1)  # softmax\n","\n","        return output"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"bkn6D2YBTIrt","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599540530572,"user_tz":-540,"elapsed":1175,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' hyper parameters '''\n","# total_batch_num = int(len(train_data) / batch_size)\n","epochs = 20\n","lr = 0.01\n","momentum = 0.5\n","print_interval = 100\n","\n","# model, optimizer 초기화\n","model = DNN_Net()  # train 코드에서 모듈 model 호출될 때마다 forward 자동 실행!\n","optimizer = optim.Adam(model.parameters(), lr=lr)"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"hqqquQIATbnd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":372},"executionInfo":{"status":"ok","timestamp":1599540542493,"user_tz":-540,"elapsed":11177,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"bede206a-6cfe-40f8-b82a-19fac6753f4b"},"source":["summary(model,(50, 1, 28, 28))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Linear-1                  [-1, 512]         401,920\n","            Linear-2                  [-1, 256]         131,328\n","            Linear-3                  [-1, 128]          32,896\n","            Linear-4                   [-1, 64]           8,256\n","            Linear-5                   [-1, 32]           2,080\n","            Linear-6                   [-1, 10]             330\n","================================================================\n","Total params: 576,810\n","Trainable params: 576,810\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.15\n","Forward/backward pass size (MB): 0.01\n","Params size (MB): 2.20\n","Estimated Total Size (MB): 2.36\n","----------------------------------------------------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PbtWJOqpxMWa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1599540545660,"user_tz":-540,"elapsed":1471,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"57b83e80-cb9e-47f9-fba9-00e8c849e5b5"},"source":["# 모델의 state_dict 출력\n","for param_tensor in model.state_dict():\n","    print(param_tensor, \"\\t\", model.state_dict()[param_tensor].size())\n","    # model.state_dict()[param_tensor].dat => 접근가능하네!\n","# 옵티마이저의 state_dict 출력\n","print(\"Optimizer's state_dict:\")\n","for var_name in optimizer.state_dict():\n","    print(var_name, \"\\t\", optimizer.state_dict()[var_name])"],"execution_count":10,"outputs":[{"output_type":"stream","text":["fc1.weight \t torch.Size([512, 784])\n","fc1.bias \t torch.Size([512])\n","fc2.weight \t torch.Size([256, 512])\n","fc2.bias \t torch.Size([256])\n","fc3.weight \t torch.Size([128, 256])\n","fc3.bias \t torch.Size([128])\n","fc4.weight \t torch.Size([64, 128])\n","fc4.bias \t torch.Size([64])\n","fc5.weight \t torch.Size([32, 64])\n","fc5.bias \t torch.Size([32])\n","fc6.weight \t torch.Size([10, 32])\n","fc6.bias \t torch.Size([10])\n","Optimizer's state_dict:\n","state \t {}\n","param_groups \t [{'lr': 0.01, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iDdPXxZ5TMM9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599541212439,"user_tz":-540,"elapsed":662227,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"5ee31c0e-bd3b-4f2a-c009-0d7cfa7fc96b"},"source":["# 통일성 있게 코드 짜자.\n","train_epoch_loss = []\n","train_epoch_acc = []\n","test_epoch_loss = []\n","test_epoch_acc = []\n","\n","for epoch in range(epochs):\n","\n","    ''' Train '''\n","    model.train()\n","    train_batch_loss = []\n","    train_batch_acc = []\n","    train_batch_num = len(train_loader)\n","    print(\"train_batch_num: \", train_batch_num)\n","    for batch_idx, (x, target) in enumerate(train_loader):\n","        if batch_idx == 0:\n","            print('x.shape', x.shape, 'target.shape', target.shape)  # torch.Size([64, 1, 28, 28]) torch.Size([64])\n","            print(len(train_loader.dataset))  # 60000\n","\n","        x, target = Variable(x), Variable(target)\n","        optimizer.zero_grad()\n","        output = model(x)\n","        loss = F.nll_loss(output, target)\n","        loss.backward()    # calc gradients\n","        train_batch_loss.append(loss.item()/batch_size*100) # from tensor -> get value loss.item() or loss.data\n","        optimizer.step()   # update gradients\n","        prediction = output.argmax(dim=1, keepdims=True)\n","        accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","        train_batch_acc.append(accuracy)\n","        if batch_idx % print_interval == 0:\n","            print('epoch: {}\\tbatch Step: {}\\tLoss: {:.3f}\\tAccuracy: {:.3f}'.format(\n","                    epoch, batch_idx, train_batch_loss[batch_idx], train_batch_acc[batch_idx]))\n","\n","    train_epoch_loss.append(np.sum(train_batch_loss)/train_batch_num)\n","    train_epoch_acc.append(np.sum(train_batch_acc)/train_batch_num)\n","\n","\n","    ''' Test '''\n","    model.eval()\n","    test_batch_loss = []\n","    test_batch_acc = []\n","    test_batch_num = len(test_loader)\n","\n","    with torch.no_grad():\n","        for batch_idx, (x, target) in enumerate(test_loader):\n","\n","            x, target = Variable(x), Variable(target)\n","            output = model(x)\n","            test_batch_loss.append(loss.item()/batch_size*100)\n","            prediction = output.argmax(dim=1, keepdims=True)\n","            accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","            test_batch_acc.append(accuracy)\n","\n","    test_epoch_loss.append(np.sum(test_batch_loss)/test_batch_num)\n","    test_epoch_acc.append(np.sum(test_batch_acc)/test_batch_num)\n","\n","\n","''' save results to numpy '''\n","train_test_result = (train_epoch_loss, test_epoch_loss, train_epoch_acc, test_epoch_acc)\n","np.save(\"result.npy\", train_test_result)\n","\n","print(\"==================================\")\n","print(\"train_epoch_loss:\", train_epoch_loss)\n","print(\"test_epoch_loss:\", test_epoch_loss)\n","print(\"train_epoch_acc\", train_epoch_acc)\n","print(\"test_epoch_acc\", train_epoch_acc)\n","print(\"==================================\")\n","x = np.arange(start=1, stop=len(train_epoch_loss)+1, step=1)\n","\n","fig = plt.figure(figsize=(12, 3))\n","ax1 = fig.add_subplot(1, 2, 1)\n","plt.plot(x, train_epoch_loss, label='train')\n","plt.plot(x, test_epoch_loss, label='test')\n","ax1.legend()\n","ax1.set(ylabel=\"Loss\", xlabel='epoch')\n","\n","ax2 = fig.add_subplot(1, 2, 2)\n","plt.plot(x, train_epoch_acc, label='train')\n","plt.plot(x, test_epoch_acc, label='test')\n","ax2.legend()\n","ax2.set(ylabel=\"Accuracy\", xlabel='epoch')\n","\n","plt.show()\n","\n","# ''' inference를 위한 모델 저장  '''\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./DNN\"\n","option = 2\n","\n","if option == 0:\n","    model_path = model_name + '_all.pt'\n","    torch.save(model, model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    torch.save(model.state_dict, model_path)\n","\n","elif option == 2:\n","    model_path = model_name + '_ckp.tar'\n","    torch.save({\n","            'last_epoch': epochs -1,\n","            'model_state_dict': model.state_dict(),\n","            'optimizer_state_dict': optimizer.state_dict(),\n","            'loss': loss,\n","            }, model_path)\n","    "],"execution_count":11,"outputs":[{"output_type":"stream","text":["train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 0\tbatch Step: 0\tLoss: 4.636\tAccuracy: 12.000\n","epoch: 0\tbatch Step: 100\tLoss: 3.141\tAccuracy: 30.000\n","epoch: 0\tbatch Step: 200\tLoss: 2.063\tAccuracy: 66.000\n","epoch: 0\tbatch Step: 300\tLoss: 1.181\tAccuracy: 72.000\n","epoch: 0\tbatch Step: 400\tLoss: 1.375\tAccuracy: 66.000\n","epoch: 0\tbatch Step: 500\tLoss: 1.347\tAccuracy: 80.000\n","epoch: 0\tbatch Step: 600\tLoss: 3.795\tAccuracy: 76.000\n","epoch: 0\tbatch Step: 700\tLoss: 1.013\tAccuracy: 88.000\n","epoch: 0\tbatch Step: 800\tLoss: 0.706\tAccuracy: 92.000\n","epoch: 0\tbatch Step: 900\tLoss: 1.865\tAccuracy: 82.000\n","epoch: 0\tbatch Step: 1000\tLoss: 1.486\tAccuracy: 84.000\n","epoch: 0\tbatch Step: 1100\tLoss: 0.883\tAccuracy: 90.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 1\tbatch Step: 0\tLoss: 0.864\tAccuracy: 88.000\n","epoch: 1\tbatch Step: 100\tLoss: 0.834\tAccuracy: 90.000\n","epoch: 1\tbatch Step: 200\tLoss: 1.332\tAccuracy: 80.000\n","epoch: 1\tbatch Step: 300\tLoss: 1.310\tAccuracy: 82.000\n","epoch: 1\tbatch Step: 400\tLoss: 0.830\tAccuracy: 90.000\n","epoch: 1\tbatch Step: 500\tLoss: 0.191\tAccuracy: 100.000\n","epoch: 1\tbatch Step: 600\tLoss: 0.659\tAccuracy: 94.000\n","epoch: 1\tbatch Step: 700\tLoss: 1.041\tAccuracy: 84.000\n","epoch: 1\tbatch Step: 800\tLoss: 1.569\tAccuracy: 86.000\n","epoch: 1\tbatch Step: 900\tLoss: 0.629\tAccuracy: 92.000\n","epoch: 1\tbatch Step: 1000\tLoss: 1.029\tAccuracy: 84.000\n","epoch: 1\tbatch Step: 1100\tLoss: 1.227\tAccuracy: 80.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 2\tbatch Step: 0\tLoss: 1.008\tAccuracy: 86.000\n","epoch: 2\tbatch Step: 100\tLoss: 0.885\tAccuracy: 82.000\n","epoch: 2\tbatch Step: 200\tLoss: 0.870\tAccuracy: 86.000\n","epoch: 2\tbatch Step: 300\tLoss: 1.011\tAccuracy: 88.000\n","epoch: 2\tbatch Step: 400\tLoss: 0.655\tAccuracy: 88.000\n","epoch: 2\tbatch Step: 500\tLoss: 1.026\tAccuracy: 80.000\n","epoch: 2\tbatch Step: 600\tLoss: 1.297\tAccuracy: 82.000\n","epoch: 2\tbatch Step: 700\tLoss: 1.230\tAccuracy: 86.000\n","epoch: 2\tbatch Step: 800\tLoss: 0.698\tAccuracy: 92.000\n","epoch: 2\tbatch Step: 900\tLoss: 0.416\tAccuracy: 92.000\n","epoch: 2\tbatch Step: 1000\tLoss: 0.730\tAccuracy: 90.000\n","epoch: 2\tbatch Step: 1100\tLoss: 0.654\tAccuracy: 92.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 3\tbatch Step: 0\tLoss: 1.125\tAccuracy: 76.000\n","epoch: 3\tbatch Step: 100\tLoss: 0.355\tAccuracy: 94.000\n","epoch: 3\tbatch Step: 200\tLoss: 0.543\tAccuracy: 92.000\n","epoch: 3\tbatch Step: 300\tLoss: 0.683\tAccuracy: 84.000\n","epoch: 3\tbatch Step: 400\tLoss: 0.766\tAccuracy: 84.000\n","epoch: 3\tbatch Step: 500\tLoss: 0.332\tAccuracy: 96.000\n","epoch: 3\tbatch Step: 600\tLoss: 0.511\tAccuracy: 94.000\n","epoch: 3\tbatch Step: 700\tLoss: 1.400\tAccuracy: 80.000\n","epoch: 3\tbatch Step: 800\tLoss: 0.720\tAccuracy: 90.000\n","epoch: 3\tbatch Step: 900\tLoss: 0.928\tAccuracy: 86.000\n","epoch: 3\tbatch Step: 1000\tLoss: 0.492\tAccuracy: 96.000\n","epoch: 3\tbatch Step: 1100\tLoss: 0.693\tAccuracy: 92.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 4\tbatch Step: 0\tLoss: 1.434\tAccuracy: 84.000\n","epoch: 4\tbatch Step: 100\tLoss: 0.428\tAccuracy: 94.000\n","epoch: 4\tbatch Step: 200\tLoss: 0.515\tAccuracy: 92.000\n","epoch: 4\tbatch Step: 300\tLoss: 0.913\tAccuracy: 84.000\n","epoch: 4\tbatch Step: 400\tLoss: 0.844\tAccuracy: 90.000\n","epoch: 4\tbatch Step: 500\tLoss: 0.701\tAccuracy: 90.000\n","epoch: 4\tbatch Step: 600\tLoss: 1.008\tAccuracy: 88.000\n","epoch: 4\tbatch Step: 700\tLoss: 0.791\tAccuracy: 88.000\n","epoch: 4\tbatch Step: 800\tLoss: 0.525\tAccuracy: 96.000\n","epoch: 4\tbatch Step: 900\tLoss: 0.552\tAccuracy: 94.000\n","epoch: 4\tbatch Step: 1000\tLoss: 0.634\tAccuracy: 88.000\n","epoch: 4\tbatch Step: 1100\tLoss: 0.884\tAccuracy: 84.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 5\tbatch Step: 0\tLoss: 0.317\tAccuracy: 94.000\n","epoch: 5\tbatch Step: 100\tLoss: 0.925\tAccuracy: 86.000\n","epoch: 5\tbatch Step: 200\tLoss: 0.495\tAccuracy: 94.000\n","epoch: 5\tbatch Step: 300\tLoss: 0.847\tAccuracy: 86.000\n","epoch: 5\tbatch Step: 400\tLoss: 0.706\tAccuracy: 94.000\n","epoch: 5\tbatch Step: 500\tLoss: 0.658\tAccuracy: 90.000\n","epoch: 5\tbatch Step: 600\tLoss: 1.499\tAccuracy: 82.000\n","epoch: 5\tbatch Step: 700\tLoss: 0.653\tAccuracy: 90.000\n","epoch: 5\tbatch Step: 800\tLoss: 1.183\tAccuracy: 84.000\n","epoch: 5\tbatch Step: 900\tLoss: 0.798\tAccuracy: 92.000\n","epoch: 5\tbatch Step: 1000\tLoss: 0.979\tAccuracy: 90.000\n","epoch: 5\tbatch Step: 1100\tLoss: 0.684\tAccuracy: 88.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 6\tbatch Step: 0\tLoss: 0.967\tAccuracy: 88.000\n","epoch: 6\tbatch Step: 100\tLoss: 0.678\tAccuracy: 88.000\n","epoch: 6\tbatch Step: 200\tLoss: 0.681\tAccuracy: 92.000\n","epoch: 6\tbatch Step: 300\tLoss: 0.856\tAccuracy: 88.000\n","epoch: 6\tbatch Step: 400\tLoss: 0.675\tAccuracy: 90.000\n","epoch: 6\tbatch Step: 500\tLoss: 0.538\tAccuracy: 94.000\n","epoch: 6\tbatch Step: 600\tLoss: 0.754\tAccuracy: 90.000\n","epoch: 6\tbatch Step: 700\tLoss: 0.688\tAccuracy: 90.000\n","epoch: 6\tbatch Step: 800\tLoss: 0.575\tAccuracy: 90.000\n","epoch: 6\tbatch Step: 900\tLoss: 0.816\tAccuracy: 88.000\n","epoch: 6\tbatch Step: 1000\tLoss: 0.734\tAccuracy: 88.000\n","epoch: 6\tbatch Step: 1100\tLoss: 0.865\tAccuracy: 86.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 7\tbatch Step: 0\tLoss: 0.831\tAccuracy: 94.000\n","epoch: 7\tbatch Step: 100\tLoss: 0.617\tAccuracy: 90.000\n","epoch: 7\tbatch Step: 200\tLoss: 0.581\tAccuracy: 94.000\n","epoch: 7\tbatch Step: 300\tLoss: 0.620\tAccuracy: 92.000\n","epoch: 7\tbatch Step: 400\tLoss: 0.306\tAccuracy: 96.000\n","epoch: 7\tbatch Step: 500\tLoss: 0.981\tAccuracy: 84.000\n","epoch: 7\tbatch Step: 600\tLoss: 0.698\tAccuracy: 88.000\n","epoch: 7\tbatch Step: 700\tLoss: 0.551\tAccuracy: 94.000\n","epoch: 7\tbatch Step: 800\tLoss: 0.976\tAccuracy: 90.000\n","epoch: 7\tbatch Step: 900\tLoss: 0.970\tAccuracy: 90.000\n","epoch: 7\tbatch Step: 1000\tLoss: 1.009\tAccuracy: 82.000\n","epoch: 7\tbatch Step: 1100\tLoss: 0.736\tAccuracy: 90.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 8\tbatch Step: 0\tLoss: 0.537\tAccuracy: 90.000\n","epoch: 8\tbatch Step: 100\tLoss: 0.806\tAccuracy: 86.000\n","epoch: 8\tbatch Step: 200\tLoss: 0.381\tAccuracy: 94.000\n","epoch: 8\tbatch Step: 300\tLoss: 0.247\tAccuracy: 98.000\n","epoch: 8\tbatch Step: 400\tLoss: 1.055\tAccuracy: 86.000\n","epoch: 8\tbatch Step: 500\tLoss: 0.481\tAccuracy: 92.000\n","epoch: 8\tbatch Step: 600\tLoss: 0.719\tAccuracy: 88.000\n","epoch: 8\tbatch Step: 700\tLoss: 1.420\tAccuracy: 80.000\n","epoch: 8\tbatch Step: 800\tLoss: 0.668\tAccuracy: 92.000\n","epoch: 8\tbatch Step: 900\tLoss: 1.179\tAccuracy: 86.000\n","epoch: 8\tbatch Step: 1000\tLoss: 0.568\tAccuracy: 90.000\n","epoch: 8\tbatch Step: 1100\tLoss: 0.540\tAccuracy: 90.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 9\tbatch Step: 0\tLoss: 1.211\tAccuracy: 84.000\n","epoch: 9\tbatch Step: 100\tLoss: 1.139\tAccuracy: 80.000\n","epoch: 9\tbatch Step: 200\tLoss: 0.849\tAccuracy: 90.000\n","epoch: 9\tbatch Step: 300\tLoss: 0.698\tAccuracy: 88.000\n","epoch: 9\tbatch Step: 400\tLoss: 0.521\tAccuracy: 96.000\n","epoch: 9\tbatch Step: 500\tLoss: 0.747\tAccuracy: 92.000\n","epoch: 9\tbatch Step: 600\tLoss: 0.678\tAccuracy: 90.000\n","epoch: 9\tbatch Step: 700\tLoss: 0.752\tAccuracy: 86.000\n","epoch: 9\tbatch Step: 800\tLoss: 0.576\tAccuracy: 94.000\n","epoch: 9\tbatch Step: 900\tLoss: 0.468\tAccuracy: 90.000\n","epoch: 9\tbatch Step: 1000\tLoss: 0.522\tAccuracy: 90.000\n","epoch: 9\tbatch Step: 1100\tLoss: 0.980\tAccuracy: 92.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 10\tbatch Step: 0\tLoss: 1.523\tAccuracy: 82.000\n","epoch: 10\tbatch Step: 100\tLoss: 0.516\tAccuracy: 94.000\n","epoch: 10\tbatch Step: 200\tLoss: 0.801\tAccuracy: 92.000\n","epoch: 10\tbatch Step: 300\tLoss: 0.536\tAccuracy: 92.000\n","epoch: 10\tbatch Step: 400\tLoss: 0.300\tAccuracy: 94.000\n","epoch: 10\tbatch Step: 500\tLoss: 0.754\tAccuracy: 92.000\n","epoch: 10\tbatch Step: 600\tLoss: 0.463\tAccuracy: 94.000\n","epoch: 10\tbatch Step: 700\tLoss: 0.764\tAccuracy: 90.000\n","epoch: 10\tbatch Step: 800\tLoss: 0.900\tAccuracy: 86.000\n","epoch: 10\tbatch Step: 900\tLoss: 0.587\tAccuracy: 90.000\n","epoch: 10\tbatch Step: 1000\tLoss: 1.072\tAccuracy: 90.000\n","epoch: 10\tbatch Step: 1100\tLoss: 1.097\tAccuracy: 82.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 11\tbatch Step: 0\tLoss: 0.786\tAccuracy: 90.000\n","epoch: 11\tbatch Step: 100\tLoss: 0.355\tAccuracy: 98.000\n","epoch: 11\tbatch Step: 200\tLoss: 0.377\tAccuracy: 94.000\n","epoch: 11\tbatch Step: 300\tLoss: 1.089\tAccuracy: 86.000\n","epoch: 11\tbatch Step: 400\tLoss: 0.645\tAccuracy: 90.000\n","epoch: 11\tbatch Step: 500\tLoss: 0.827\tAccuracy: 84.000\n","epoch: 11\tbatch Step: 600\tLoss: 1.129\tAccuracy: 86.000\n","epoch: 11\tbatch Step: 700\tLoss: 1.143\tAccuracy: 84.000\n","epoch: 11\tbatch Step: 800\tLoss: 0.851\tAccuracy: 84.000\n","epoch: 11\tbatch Step: 900\tLoss: 0.632\tAccuracy: 92.000\n","epoch: 11\tbatch Step: 1000\tLoss: 0.598\tAccuracy: 90.000\n","epoch: 11\tbatch Step: 1100\tLoss: 0.662\tAccuracy: 90.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 12\tbatch Step: 0\tLoss: 0.682\tAccuracy: 86.000\n","epoch: 12\tbatch Step: 100\tLoss: 0.867\tAccuracy: 90.000\n","epoch: 12\tbatch Step: 200\tLoss: 0.912\tAccuracy: 90.000\n","epoch: 12\tbatch Step: 300\tLoss: 1.018\tAccuracy: 86.000\n","epoch: 12\tbatch Step: 400\tLoss: 0.430\tAccuracy: 94.000\n","epoch: 12\tbatch Step: 500\tLoss: 0.789\tAccuracy: 88.000\n","epoch: 12\tbatch Step: 600\tLoss: 0.702\tAccuracy: 90.000\n","epoch: 12\tbatch Step: 700\tLoss: 0.867\tAccuracy: 90.000\n","epoch: 12\tbatch Step: 800\tLoss: 0.724\tAccuracy: 86.000\n","epoch: 12\tbatch Step: 900\tLoss: 1.274\tAccuracy: 86.000\n","epoch: 12\tbatch Step: 1000\tLoss: 0.920\tAccuracy: 84.000\n","epoch: 12\tbatch Step: 1100\tLoss: 0.843\tAccuracy: 86.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 13\tbatch Step: 0\tLoss: 0.801\tAccuracy: 90.000\n","epoch: 13\tbatch Step: 100\tLoss: 0.651\tAccuracy: 94.000\n","epoch: 13\tbatch Step: 200\tLoss: 0.484\tAccuracy: 96.000\n","epoch: 13\tbatch Step: 300\tLoss: 0.722\tAccuracy: 90.000\n","epoch: 13\tbatch Step: 400\tLoss: 0.932\tAccuracy: 88.000\n","epoch: 13\tbatch Step: 500\tLoss: 0.915\tAccuracy: 88.000\n","epoch: 13\tbatch Step: 600\tLoss: 0.679\tAccuracy: 88.000\n","epoch: 13\tbatch Step: 700\tLoss: 0.623\tAccuracy: 90.000\n","epoch: 13\tbatch Step: 800\tLoss: 0.245\tAccuracy: 96.000\n","epoch: 13\tbatch Step: 900\tLoss: 0.340\tAccuracy: 96.000\n","epoch: 13\tbatch Step: 1000\tLoss: 0.719\tAccuracy: 90.000\n","epoch: 13\tbatch Step: 1100\tLoss: 0.703\tAccuracy: 90.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 14\tbatch Step: 0\tLoss: 0.606\tAccuracy: 90.000\n","epoch: 14\tbatch Step: 100\tLoss: 0.564\tAccuracy: 92.000\n","epoch: 14\tbatch Step: 200\tLoss: 0.575\tAccuracy: 94.000\n","epoch: 14\tbatch Step: 300\tLoss: 0.641\tAccuracy: 92.000\n","epoch: 14\tbatch Step: 400\tLoss: 0.582\tAccuracy: 90.000\n","epoch: 14\tbatch Step: 500\tLoss: 0.915\tAccuracy: 88.000\n","epoch: 14\tbatch Step: 600\tLoss: 0.526\tAccuracy: 92.000\n","epoch: 14\tbatch Step: 700\tLoss: 0.878\tAccuracy: 90.000\n","epoch: 14\tbatch Step: 800\tLoss: 0.812\tAccuracy: 86.000\n","epoch: 14\tbatch Step: 900\tLoss: 0.818\tAccuracy: 88.000\n","epoch: 14\tbatch Step: 1000\tLoss: 1.391\tAccuracy: 84.000\n","epoch: 14\tbatch Step: 1100\tLoss: 0.388\tAccuracy: 96.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 15\tbatch Step: 0\tLoss: 1.406\tAccuracy: 80.000\n","epoch: 15\tbatch Step: 100\tLoss: 0.665\tAccuracy: 90.000\n","epoch: 15\tbatch Step: 200\tLoss: 0.827\tAccuracy: 84.000\n","epoch: 15\tbatch Step: 300\tLoss: 0.253\tAccuracy: 98.000\n","epoch: 15\tbatch Step: 400\tLoss: 1.543\tAccuracy: 80.000\n","epoch: 15\tbatch Step: 500\tLoss: 0.525\tAccuracy: 92.000\n","epoch: 15\tbatch Step: 600\tLoss: 0.808\tAccuracy: 90.000\n","epoch: 15\tbatch Step: 700\tLoss: 0.236\tAccuracy: 98.000\n","epoch: 15\tbatch Step: 800\tLoss: 0.668\tAccuracy: 90.000\n","epoch: 15\tbatch Step: 900\tLoss: 0.419\tAccuracy: 92.000\n","epoch: 15\tbatch Step: 1000\tLoss: 1.356\tAccuracy: 90.000\n","epoch: 15\tbatch Step: 1100\tLoss: 0.304\tAccuracy: 94.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 16\tbatch Step: 0\tLoss: 0.724\tAccuracy: 90.000\n","epoch: 16\tbatch Step: 100\tLoss: 1.479\tAccuracy: 78.000\n","epoch: 16\tbatch Step: 200\tLoss: 0.890\tAccuracy: 88.000\n","epoch: 16\tbatch Step: 300\tLoss: 0.780\tAccuracy: 90.000\n","epoch: 16\tbatch Step: 400\tLoss: 0.602\tAccuracy: 94.000\n","epoch: 16\tbatch Step: 500\tLoss: 0.924\tAccuracy: 84.000\n","epoch: 16\tbatch Step: 600\tLoss: 0.301\tAccuracy: 96.000\n","epoch: 16\tbatch Step: 700\tLoss: 0.801\tAccuracy: 86.000\n","epoch: 16\tbatch Step: 800\tLoss: 0.635\tAccuracy: 88.000\n","epoch: 16\tbatch Step: 900\tLoss: 0.969\tAccuracy: 92.000\n","epoch: 16\tbatch Step: 1000\tLoss: 0.774\tAccuracy: 90.000\n","epoch: 16\tbatch Step: 1100\tLoss: 1.227\tAccuracy: 80.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 17\tbatch Step: 0\tLoss: 0.528\tAccuracy: 90.000\n","epoch: 17\tbatch Step: 100\tLoss: 0.261\tAccuracy: 98.000\n","epoch: 17\tbatch Step: 200\tLoss: 0.339\tAccuracy: 96.000\n","epoch: 17\tbatch Step: 300\tLoss: 1.203\tAccuracy: 86.000\n","epoch: 17\tbatch Step: 400\tLoss: 1.247\tAccuracy: 88.000\n","epoch: 17\tbatch Step: 500\tLoss: 0.960\tAccuracy: 84.000\n","epoch: 17\tbatch Step: 600\tLoss: 0.655\tAccuracy: 90.000\n","epoch: 17\tbatch Step: 700\tLoss: 0.453\tAccuracy: 94.000\n","epoch: 17\tbatch Step: 800\tLoss: 1.177\tAccuracy: 90.000\n","epoch: 17\tbatch Step: 900\tLoss: 0.489\tAccuracy: 92.000\n","epoch: 17\tbatch Step: 1000\tLoss: 0.517\tAccuracy: 94.000\n","epoch: 17\tbatch Step: 1100\tLoss: 1.459\tAccuracy: 76.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 18\tbatch Step: 0\tLoss: 0.801\tAccuracy: 84.000\n","epoch: 18\tbatch Step: 100\tLoss: 0.773\tAccuracy: 90.000\n","epoch: 18\tbatch Step: 200\tLoss: 0.241\tAccuracy: 96.000\n","epoch: 18\tbatch Step: 300\tLoss: 0.548\tAccuracy: 96.000\n","epoch: 18\tbatch Step: 400\tLoss: 0.400\tAccuracy: 94.000\n","epoch: 18\tbatch Step: 500\tLoss: 0.881\tAccuracy: 88.000\n","epoch: 18\tbatch Step: 600\tLoss: 1.010\tAccuracy: 84.000\n","epoch: 18\tbatch Step: 700\tLoss: 0.465\tAccuracy: 92.000\n","epoch: 18\tbatch Step: 800\tLoss: 0.892\tAccuracy: 88.000\n","epoch: 18\tbatch Step: 900\tLoss: 0.310\tAccuracy: 96.000\n","epoch: 18\tbatch Step: 1000\tLoss: 0.774\tAccuracy: 90.000\n","epoch: 18\tbatch Step: 1100\tLoss: 0.948\tAccuracy: 86.000\n","train_batch_num:  1200\n","x.shape torch.Size([50, 1, 28, 28]) target.shape torch.Size([50])\n","60000\n","epoch: 19\tbatch Step: 0\tLoss: 0.255\tAccuracy: 94.000\n","epoch: 19\tbatch Step: 100\tLoss: 0.644\tAccuracy: 90.000\n","epoch: 19\tbatch Step: 200\tLoss: 0.797\tAccuracy: 86.000\n","epoch: 19\tbatch Step: 300\tLoss: 0.764\tAccuracy: 90.000\n","epoch: 19\tbatch Step: 400\tLoss: 0.547\tAccuracy: 92.000\n","epoch: 19\tbatch Step: 500\tLoss: 0.457\tAccuracy: 94.000\n","epoch: 19\tbatch Step: 600\tLoss: 0.364\tAccuracy: 96.000\n","epoch: 19\tbatch Step: 700\tLoss: 1.256\tAccuracy: 88.000\n","epoch: 19\tbatch Step: 800\tLoss: 1.210\tAccuracy: 78.000\n","epoch: 19\tbatch Step: 900\tLoss: 0.558\tAccuracy: 92.000\n","epoch: 19\tbatch Step: 1000\tLoss: 0.955\tAccuracy: 88.000\n","epoch: 19\tbatch Step: 1100\tLoss: 1.195\tAccuracy: 88.000\n","==================================\n","train_epoch_loss: [1.5123952439054846, 0.91855581946671, 0.8292053363720576, 0.8058420001342893, 0.775139105208218, 0.7608530446638664, 0.7500792207196355, 0.7611377454052369, 0.7286531783019503, 0.7483551878109574, 0.7405491714986662, 0.7458427740260959, 0.762963019448022, 0.7308422619942576, 0.7284608015976847, 0.7344181933502356, 0.7818660187410812, 0.7178188708548745, 0.7253004354176422, 0.7034858526227374]\n","test_epoch_loss: [0.7163217663764954, 1.5847527980804446, 0.8539098501205443, 0.96016663312912, 0.39293625950813293, 1.0015220642089844, 0.5163301229476929, 0.43489208817481995, 0.837717592716217, 0.6972534656524658, 0.4856155514717102, 1.4529701471328735, 0.5754440426826477, 0.7529834508895874, 0.43567329645156866, 0.9603374600410463, 1.1447123289108276, 1.0312612056732178, 0.2905046343803406, 1.2635611295700073]\n","train_epoch_acc [74.07833333333333, 86.50166666666667, 88.03, 88.37166666666667, 88.93333333333334, 89.14833333333333, 89.395, 89.345, 89.82666666666667, 89.495, 89.88166666666666, 89.61166666666666, 89.46833333333333, 89.94833333333334, 90.06666666666666, 89.87333333333333, 89.46666666666667, 89.97333333333333, 90.01166666666667, 90.48]\n","test_epoch_acc [74.07833333333333, 86.50166666666667, 88.03, 88.37166666666667, 88.93333333333334, 89.14833333333333, 89.395, 89.345, 89.82666666666667, 89.495, 89.88166666666666, 89.61166666666666, 89.46833333333333, 89.94833333333334, 90.06666666666666, 89.87333333333333, 89.46666666666667, 89.97333333333333, 90.01166666666667, 90.48]\n","==================================\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 864x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"J31wFkZzZviK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":551},"executionInfo":{"status":"ok","timestamp":1599539543958,"user_tz":-540,"elapsed":1499,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"3ac76d68-8075-47e5-aef1-3696b511a4ec"},"source":["''' 모델 불러오기 '''\n","\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./DNN\"\n","option = 2\n","\n","if option == 0:\n","    # 모델 클래스는 어딘가에 반드시 선언되어 있어야 합니다\n","    model_path = model_name + '_all.pt'\n","    model = torch.load(model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    model = DNN_Net()\n","    model.load_state_dict(torch.load(model_path))\n","\n","elif option == 2:\n","    # model, optimizer 초기화\n","    model = DNN_Net()\n","    optimizer = optim.Adam(model.parameters(), lr=lr)\n","\n","    model_path = model_name + '_ckp.tar'\n","    checkpoint = torch.load(model_path)\n","    model.load_state_dict(checkpoint['model_state_dict'])\n","    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n","    last_epoch = checkpoint['last_epoch']\n","    loss = checkpoint['loss']\n","\n","\n","''' Plot Test '''\n","model.eval()\n","test_batch_loss = []\n","test_batch_acc = []\n","test_batch_num = len(test_loader)\n","\n","num_test_img = 10\n","plt_row = 2\n","plt_col = num_test_img /2\n","cnt = 0\n","fig_test = plt.figure(figsize=(12, 8))\n","with torch.no_grad():\n","    for batch_idx, (x, target) in enumerate(test_loader):  \n","        if batch_idx > 0 : # 일부만 확인할거임\n","            break\n","        for b in range(batch_size):\n","            if cnt >= num_test_img :\n","                break\n","            img = x[b]\n","            output = model(img)\n","            prediction = output.argmax(dim=1, keepdims = False).item()\n","            subplt = fig_test.add_subplot(plt_row, plt_col, b + 1)\n","            subplt.set_title(\"prediction : %d\" % prediction)\n","            subplt.imshow(img.reshape((28, 28)), cmap=plt.cm.gray_r)\n","\n","            cnt += 1\n","plt.show()\n"],"execution_count":46,"outputs":[{"output_type":"stream","text":["7 0\n","1 1\n","1 2\n","2 3\n","3 4\n","4 5\n","6 6\n","7 7\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 8 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"qCR-8qxc_9ZR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599539884529,"user_tz":-540,"elapsed":802,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"65f85fab-130d-4a16-bc54-999494781449"},"source":["'''trainable parameter 확인'''\n","param_dict = {}\n","for param_tensor in model.state_dict():\n","    param_dict[param_tensor] = model.state_dict()[param_tensor]\n","    print(param_tensor, model.state_dict()[param_tensor].size())\n","\n","print(\"========================\")\n","print(param_dict)"],"execution_count":49,"outputs":[{"output_type":"stream","text":["fc1.weight torch.Size([512, 784])\n","fc1.bias torch.Size([512])\n","fc2.weight torch.Size([256, 512])\n","fc2.bias torch.Size([256])\n","fc3.weight torch.Size([128, 256])\n","fc3.bias torch.Size([128])\n","fc4.weight torch.Size([64, 128])\n","fc4.bias torch.Size([64])\n","fc5.weight torch.Size([32, 64])\n","fc5.bias torch.Size([32])\n","fc6.weight torch.Size([10, 32])\n","fc6.bias torch.Size([10])\n","{'fc1.weight': tensor([[ 0.0178, -0.0313,  0.0153,  ...,  0.0320, -0.0134, -0.0018],\n","        [ 0.0103, -0.0084,  0.0005,  ...,  0.0436, -0.0225,  0.0307],\n","        [-0.0057,  0.0106, -0.0169,  ...,  0.0303,  0.0247,  0.0242],\n","        ...,\n","        [-0.0181, -0.0010, -0.0074,  ..., -0.0161, -0.0292, -0.0012],\n","        [-0.0268, -0.0010, -0.0125,  ...,  0.0367,  0.0395, -0.0041],\n","        [ 0.0048,  0.0135,  0.0201,  ...,  0.0145,  0.0290,  0.0299]]), 'fc1.bias': tensor([ 2.7251e-02, -1.0061e-02, -2.5854e-02,  6.2849e-03,  1.5628e-02,\n","         2.3756e-02, -6.7040e-03,  5.9113e-03, -1.6234e-02, -1.7354e-02,\n","        -1.4856e-02, -2.3461e-02, -2.5815e-02, -2.2201e-02, -1.3855e-02,\n","         1.3635e-02,  1.6872e-02,  2.9144e-02, -1.0693e-03,  3.2511e-03,\n","        -2.1241e-02, -1.2595e-02,  1.3324e-02, -1.7020e-02, -5.3032e-03,\n","        -3.6009e-02,  1.0602e-02, -3.3771e-02, -1.8142e-02,  7.1262e-03,\n","        -2.6052e-03, -2.3137e-02, -2.7401e-02,  3.7765e-02,  2.6412e-02,\n","        -3.2114e-02, -3.1320e-02,  1.3542e-02,  1.4125e-02, -8.1648e-03,\n","        -1.9232e-02, -2.9148e-02,  1.7345e-02, -4.0122e-02,  1.1418e-02,\n","        -4.8806e-03,  2.4100e-02, -2.5301e-02, -4.0003e-02, -3.3719e-02,\n","        -5.5979e-03, -2.2995e-02, -3.1285e-02, -9.6948e-03,  6.6422e-03,\n","         3.6996e-02, -8.6475e-04,  2.3025e-03,  9.9211e-03,  1.2195e-02,\n","         7.9100e-03, -3.3380e-02, -9.8379e-03,  8.2824e-03,  2.4071e-02,\n","         2.7192e-03,  1.7161e-02,  7.3289e-03, -1.5759e-02, -8.4321e-03,\n","         3.1429e-02,  1.0661e-02,  2.7307e-02,  9.5111e-03, -1.7599e-02,\n","        -2.7174e-02,  2.2271e-02, -3.4319e-03, -1.0927e-02,  2.7706e-02,\n","         4.8659e-02,  9.1367e-03,  1.0440e-02,  2.1903e-02, -1.4481e-02,\n","        -2.9201e-02, -2.6770e-03,  3.2634e-02, -4.0190e-02,  5.1243e-03,\n","         5.5679e-03,  4.5742e-03, -4.4868e-02, -2.6678e-02, -2.6332e-02,\n","        -3.7017e-02, -1.6915e-02,  2.5851e-02, -3.9080e-02, -5.8470e-03,\n","         2.0913e-04, -3.3049e-02,  3.5134e-03,  5.8118e-03, -1.9446e-02,\n","        -2.8620e-02, -1.8411e-02, -1.7265e-02, -1.1051e-02,  1.8334e-02,\n","         2.0184e-02, -2.8114e-02,  2.7433e-02,  1.1335e-02, -2.0062e-02,\n","        -4.3127e-02, -3.4886e-02,  8.1593e-03,  3.5572e-02,  7.5644e-03,\n","         3.8515e-02, -2.3176e-02,  8.9962e-03,  3.2870e-02,  3.0654e-02,\n","        -9.1970e-03, -3.2105e-02, -8.6257e-03,  1.3190e-03,  1.8026e-02,\n","         8.8748e-03, -2.9373e-02, -4.2226e-02,  1.7107e-02, -3.6465e-02,\n","        -5.2494e-05,  1.1396e-02,  1.7483e-03, -1.6486e-02,  1.7306e-02,\n","         2.6923e-02,  5.3818e-03,  7.2390e-03, -3.3929e-02, -2.7271e-02,\n","        -3.8692e-02, -7.4436e-03, -3.0543e-02, -7.8009e-03, -1.4770e-04,\n","         1.1598e-02,  2.5480e-02,  8.5923e-03, -3.6370e-02,  2.8532e-02,\n","         1.8016e-02, -6.3621e-03, -9.4856e-04, -2.6520e-02, -6.6878e-03,\n","        -1.6452e-03, -2.0050e-02, -3.2513e-02,  9.3294e-03,  1.3656e-02,\n","         1.1389e-02, -3.6471e-02,  2.6099e-02, -1.6945e-02,  1.2633e-02,\n","         1.6327e-03, -1.7226e-02, -3.9648e-02,  1.3555e-02,  2.0147e-02,\n","         3.1621e-02, -1.8539e-02,  2.0590e-03, -4.0774e-02, -8.6576e-03,\n","         1.7031e-02, -3.7982e-02, -3.7905e-03, -1.4786e-02, -2.1475e-02,\n","         9.2544e-03,  1.1951e-02, -6.3608e-03,  3.1636e-02, -2.5704e-03,\n","        -1.2651e-02, -1.6660e-02,  1.4529e-02, -1.8602e-02, -6.1310e-03,\n","        -2.2195e-02, -3.2423e-02, -8.0736e-03, -1.0083e-02,  5.2343e-03,\n","        -3.0535e-02,  1.0548e-02, -9.9932e-03,  1.5233e-02, -2.9542e-02,\n","         1.3064e-02, -2.0917e-03,  1.1958e-02, -2.4411e-02, -1.0155e-02,\n","        -3.8325e-02, -1.4549e-02, -1.8294e-02, -1.6993e-02, -1.8072e-02,\n","        -6.3406e-03,  1.3397e-02, -1.0063e-02, -3.8491e-02, -3.0579e-03,\n","        -4.0200e-02, -3.1337e-02,  5.7688e-04, -1.7042e-02, -7.8795e-03,\n","        -3.9376e-02,  1.0633e-03, -3.6253e-03,  2.3157e-02,  1.8883e-02,\n","         2.7385e-02, -2.5085e-02,  2.8175e-03, -2.0150e-02, -2.8004e-02,\n","         2.0715e-02,  2.5830e-02,  1.1116e-02, -3.9769e-02, -1.0140e-02,\n","        -1.0983e-02, -2.2346e-02, -4.3689e-02, -4.1273e-02, -7.8916e-03,\n","         2.4338e-02, -2.1364e-03, -1.6887e-02, -3.9079e-02, -1.6778e-02,\n","        -3.6258e-02, -1.8561e-02, -1.4165e-02, -1.3699e-02,  2.9805e-02,\n","        -6.2933e-03, -3.6591e-02, -3.4981e-02,  1.1407e-02, -4.5124e-03,\n","        -2.4821e-02,  1.7494e-02,  1.2629e-02, -3.5249e-02,  7.9583e-03,\n","        -3.3363e-02, -1.6982e-03, -1.4062e-02,  1.2132e-02,  1.1908e-02,\n","        -1.4540e-03, -1.5794e-03,  4.0714e-02, -1.4594e-02, -3.9485e-02,\n","        -1.0249e-02, -3.6754e-02,  6.8387e-03, -3.2269e-02, -4.0618e-02,\n","        -2.6772e-02, -1.9310e-02, -3.3071e-02,  1.2437e-04, -3.6596e-02,\n","         1.4059e-02,  3.1238e-02,  1.3149e-02, -5.7187e-03,  1.8620e-02,\n","        -2.7887e-02, -1.2835e-02, -2.1285e-02, -2.3794e-02, -3.7962e-02,\n","         1.0469e-02,  3.8574e-03,  2.6785e-02, -1.1643e-04, -2.8093e-02,\n","        -2.9444e-02,  1.2947e-02,  1.0840e-02, -1.7038e-02, -3.8349e-02,\n","         1.7700e-02,  1.1633e-03,  1.9315e-02,  1.6913e-02,  5.8847e-03,\n","        -3.1744e-02, -2.9608e-02,  1.0485e-02, -3.3740e-02, -3.4967e-02,\n","        -1.6555e-02, -1.2025e-02, -1.3818e-02, -9.4697e-03,  2.3243e-03,\n","        -2.2179e-02, -2.0214e-02,  6.2034e-03,  7.5203e-03,  1.4817e-02,\n","         8.9318e-03,  1.6486e-02, -3.1757e-02, -1.1042e-03, -1.3452e-02,\n","        -3.3927e-02, -3.2521e-02, -4.1341e-02, -1.9326e-02, -1.6641e-02,\n","        -2.7685e-02, -2.9617e-02, -3.1234e-02, -9.1539e-03, -2.4311e-02,\n","        -7.2858e-03, -3.1706e-03, -1.2505e-03, -3.0680e-02,  2.2704e-02,\n","        -1.4030e-02, -1.1391e-02,  1.2285e-02, -3.4763e-02,  6.3538e-03,\n","        -1.7100e-02, -3.7603e-02,  6.6790e-03, -2.2992e-02, -1.6647e-02,\n","         1.4163e-03,  3.1375e-02, -1.1375e-02, -1.0576e-02,  1.5358e-02,\n","         1.4961e-02, -2.1890e-02,  1.7398e-02,  7.0889e-03,  1.1865e-02,\n","         1.1509e-02, -4.2301e-02,  2.9724e-02,  2.1033e-02,  3.1255e-02,\n","        -1.2264e-02,  9.8400e-03, -5.3306e-03,  9.8042e-03,  2.3563e-02,\n","         7.3225e-03, -9.9824e-03, -4.1299e-02,  4.2191e-03, -3.5565e-02,\n","        -6.4189e-03,  2.0560e-02, -2.5204e-02, -2.3034e-02,  5.9475e-03,\n","        -7.7960e-03, -1.9296e-03,  1.1221e-02, -2.3746e-02,  1.3760e-03,\n","        -2.6706e-02,  9.4120e-03,  1.6917e-02, -1.4817e-02, -8.6255e-03,\n","         4.2188e-04,  2.9923e-03,  6.2891e-03,  1.1935e-02, -9.9409e-03,\n","        -5.4050e-02, -5.6509e-03,  2.2741e-02, -3.6742e-02,  2.3763e-02,\n","         7.8912e-03, -1.6871e-02,  1.1891e-02, -3.9710e-02,  3.9079e-02,\n","         1.5333e-03, -1.1567e-02, -1.2752e-02,  1.7687e-02, -1.8838e-02,\n","        -6.8656e-03, -2.5961e-02,  2.0550e-02, -3.0601e-02,  1.3059e-02,\n","         1.5365e-02, -3.9238e-02,  1.2206e-02, -2.8783e-03,  2.6426e-02,\n","        -3.2795e-02, -1.4938e-03, -2.5552e-02,  2.1762e-02,  1.8620e-02,\n","         1.4587e-02,  5.3979e-03,  4.8173e-02, -2.3764e-03, -1.4374e-02,\n","        -1.3721e-02, -3.2335e-02,  1.9149e-02, -6.2191e-03, -7.0779e-03,\n","         2.1650e-02,  2.6612e-02,  8.3014e-03, -1.8274e-03,  6.9358e-03,\n","         1.2351e-02, -3.7795e-02,  1.7008e-02,  4.9989e-03, -1.1518e-02,\n","        -4.0082e-02, -8.8722e-03, -2.9230e-02,  2.2661e-02,  1.0057e-02,\n","         2.8604e-02, -2.5754e-02,  1.2474e-02,  1.8676e-02,  3.3181e-02,\n","        -3.5164e-02,  1.0119e-02, -2.0524e-02,  1.8579e-02, -2.7482e-02,\n","         5.7252e-03, -3.3228e-02, -2.8320e-02, -4.7514e-03,  1.7292e-02,\n","        -4.2521e-03, -2.0041e-02, -2.8292e-02, -3.6636e-02, -1.7062e-02,\n","        -1.8064e-02,  9.4015e-03, -1.1034e-03, -3.1597e-02, -2.9097e-02,\n","        -1.7289e-02, -3.4953e-02, -1.6839e-02,  7.1778e-03, -1.4076e-03,\n","        -2.2553e-02,  1.9369e-02,  4.8847e-03, -7.0146e-03, -6.5679e-03,\n","        -2.3222e-02, -3.5899e-02,  1.0371e-02, -1.9182e-02,  2.7823e-02,\n","         2.2234e-02,  2.1665e-02, -3.9149e-02,  2.0112e-03, -2.9730e-02,\n","        -5.0181e-02,  2.8793e-02, -9.5061e-03, -9.6208e-03, -1.9672e-02,\n","        -3.4069e-03, -4.3966e-02,  2.8360e-02, -2.1068e-02, -1.5341e-03,\n","        -2.1919e-02,  1.0906e-02]), 'fc2.weight': tensor([[ 0.0556, -0.0266, -0.0517,  ...,  0.0582, -0.0384,  0.0051],\n","        [-0.0457, -0.0137, -0.0341,  ..., -0.0067, -0.0178,  0.0279],\n","        [ 0.0177, -0.0044, -0.0482,  ..., -0.0433, -0.0245,  0.0017],\n","        ...,\n","        [-0.0236,  0.0359, -0.0609,  ..., -0.0566, -0.0369, -0.0213],\n","        [ 0.0947, -0.0174,  0.0753,  ...,  0.0218,  0.0420,  0.0044],\n","        [-0.0077,  0.0432, -0.0374,  ...,  0.0346,  0.0103, -0.0402]]), 'fc2.bias': tensor([ 0.0751,  0.0039, -0.0366,  0.0287, -0.0042,  0.0165, -0.0479, -0.0221,\n","         0.0375, -0.0618,  0.0375,  0.0299,  0.0092, -0.0388,  0.0096, -0.0452,\n","        -0.0262,  0.0079, -0.0173, -0.0590, -0.0322,  0.0053, -0.0345,  0.0042,\n","         0.0085,  0.0442,  0.0397,  0.0100,  0.0493,  0.0586,  0.0391, -0.0148,\n","        -0.0261,  0.0365,  0.0275, -0.0620,  0.0308,  0.0414, -0.0185,  0.0101,\n","         0.0373, -0.0161, -0.0231,  0.0072,  0.0621, -0.0162, -0.0552, -0.0120,\n","         0.0009,  0.0382,  0.0116, -0.0454, -0.0065, -0.0116, -0.0280,  0.0099,\n","         0.0465,  0.0338, -0.0383, -0.0390,  0.0115,  0.0384, -0.0303, -0.0149,\n","        -0.0172,  0.0152,  0.0128,  0.0401,  0.0386, -0.0717,  0.0313, -0.0362,\n","        -0.0541,  0.0498,  0.0082, -0.0949, -0.0099,  0.0715,  0.0387,  0.0086,\n","        -0.0715,  0.0189, -0.0196, -0.0031,  0.0411,  0.0039,  0.0321, -0.0423,\n","        -0.0442, -0.0772,  0.0212,  0.0118,  0.0209,  0.0195,  0.0214, -0.0493,\n","         0.0009,  0.0056,  0.0390,  0.0333, -0.0479,  0.0029, -0.0117,  0.0031,\n","        -0.0272,  0.0426, -0.0135,  0.0393,  0.0298, -0.0084,  0.0580, -0.0029,\n","         0.0606,  0.0033, -0.0196, -0.0255, -0.0051,  0.0198,  0.0406, -0.0628,\n","         0.0299,  0.0561,  0.0495, -0.0294,  0.0473, -0.0437, -0.0162, -0.0077,\n","         0.0522, -0.0470, -0.0489,  0.0810, -0.0408, -0.0949, -0.0469, -0.0595,\n","        -0.0420,  0.0418, -0.0019,  0.0588,  0.0822, -0.0264,  0.0019, -0.0210,\n","         0.0271, -0.0464, -0.0362,  0.0415, -0.0217, -0.0436, -0.0518,  0.0250,\n","         0.0784,  0.0553,  0.0525,  0.0502, -0.0136, -0.0496, -0.0147, -0.0403,\n","         0.0637, -0.0146,  0.0306,  0.0247,  0.0228,  0.0357,  0.0003, -0.0303,\n","         0.0383,  0.0886,  0.0004, -0.0364, -0.0799, -0.0359,  0.0379, -0.0220,\n","         0.0166, -0.0741,  0.0367,  0.0045,  0.0097, -0.0113,  0.0329, -0.0317,\n","        -0.0550, -0.0285,  0.0143,  0.0401,  0.0655,  0.0255,  0.0247, -0.0281,\n","         0.0269,  0.0298, -0.0387,  0.0449,  0.0121,  0.0464,  0.0319,  0.0020,\n","         0.0087,  0.0416, -0.0070,  0.0084,  0.0370, -0.0286, -0.0460, -0.0508,\n","         0.0176,  0.0307, -0.0077,  0.0617, -0.0274, -0.0050, -0.0009, -0.0546,\n","         0.0860,  0.0511, -0.0477, -0.0021,  0.0431, -0.0096, -0.0528, -0.0200,\n","        -0.0419,  0.0025,  0.0309, -0.0113,  0.0355, -0.0311, -0.0087,  0.0411,\n","         0.0966, -0.0847,  0.0712, -0.0237,  0.0789,  0.0310,  0.0328, -0.0646,\n","         0.0001, -0.0057, -0.0605, -0.0150, -0.0179,  0.0140, -0.0163, -0.0054,\n","        -0.0415, -0.0864,  0.0491,  0.0107, -0.0343, -0.0134,  0.0065, -0.0096]), 'fc3.weight': tensor([[ 0.1038, -0.0381,  0.0500,  ...,  0.0083,  0.0714,  0.0314],\n","        [ 0.1088, -0.0506,  0.0381,  ..., -0.0018,  0.0907,  0.0242],\n","        [-0.0380, -0.0528,  0.0307,  ...,  0.0826,  0.0910,  0.0212],\n","        ...,\n","        [-0.0032,  0.0432, -0.0218,  ...,  0.0276,  0.0072,  0.0062],\n","        [ 0.0798,  0.0454,  0.0416,  ...,  0.0307, -0.0303, -0.0259],\n","        [-0.0350,  0.0234, -0.0091,  ...,  0.0200,  0.0476, -0.0235]]), 'fc3.bias': tensor([ 3.1587e-02,  1.0990e-01,  1.0444e-01,  4.4934e-02,  1.0343e-02,\n","         3.0760e-02,  6.4333e-02, -5.5332e-03,  5.7106e-02, -3.8656e-02,\n","         2.6507e-02, -2.2431e-02,  6.6666e-02, -6.9117e-02, -2.0669e-02,\n","        -3.2033e-02,  3.6986e-02, -5.5004e-02,  2.8906e-02,  5.1334e-02,\n","        -4.2837e-02, -2.7165e-02, -4.4392e-02,  5.2775e-04, -2.8654e-02,\n","         6.1982e-02, -8.0293e-02, -7.2299e-02, -2.7080e-02,  4.4977e-02,\n","         9.2804e-02, -7.5983e-02, -4.8806e-02, -2.1275e-02, -5.6693e-02,\n","        -4.0880e-02,  2.2774e-02,  5.0024e-03, -6.6991e-02,  7.2079e-02,\n","        -6.2602e-02, -1.9304e-02,  7.5793e-02,  5.5263e-03,  4.0615e-02,\n","        -8.3545e-02,  4.6470e-02, -5.7885e-02, -2.5989e-02,  7.1092e-02,\n","        -2.6314e-02,  3.0006e-02,  4.9188e-02,  7.2241e-02,  8.1083e-02,\n","        -3.8087e-02,  6.3286e-03,  3.3427e-02, -1.6885e-02, -2.7147e-02,\n","         3.5224e-03,  2.7791e-02,  8.9598e-02,  5.4218e-02,  3.6207e-02,\n","        -3.0238e-02,  4.9961e-02, -1.5594e-02, -2.3378e-03, -2.1838e-02,\n","         1.3180e-02,  4.4086e-02,  5.1162e-03,  6.3101e-02,  1.6388e-02,\n","         8.3341e-02, -5.6922e-02, -7.5757e-02, -9.9623e-02,  4.8752e-02,\n","        -5.4248e-02,  2.1281e-02, -7.5510e-02, -6.0392e-02, -7.0691e-02,\n","         1.4111e-02,  3.4065e-02,  5.9553e-02,  5.0368e-04, -2.2500e-02,\n","        -2.1014e-02, -4.2844e-02, -9.5589e-03,  1.7866e-02,  1.7935e-02,\n","         8.7022e-02, -1.2618e-02,  6.2921e-03,  1.3882e-02, -1.7520e-02,\n","         1.5161e-02, -1.3350e-02,  1.0108e-02,  8.6498e-02,  1.4553e-02,\n","         4.5491e-02,  2.7796e-02, -7.5728e-02,  3.7157e-02, -4.1684e-03,\n","        -5.0073e-03,  7.8102e-02,  9.8698e-02, -8.9487e-02, -5.2289e-02,\n","         8.3856e-05, -3.7017e-02,  6.7913e-02,  4.0090e-02,  3.8580e-02,\n","        -4.6376e-02,  1.5691e-02,  3.4640e-02, -7.3521e-02, -2.0593e-02,\n","         3.3242e-02, -3.6003e-02, -2.3754e-02]), 'fc4.weight': tensor([[ 0.0161, -0.0477, -0.0938,  ..., -0.0656, -0.0514,  0.0121],\n","        [ 0.0847, -0.0046, -0.0931,  ..., -0.0019, -0.0015,  0.0350],\n","        [ 0.0224,  0.0797,  0.0169,  ...,  0.0920,  0.0083,  0.0026],\n","        ...,\n","        [ 0.0801, -0.2164, -0.2435,  ..., -0.0754, -0.0247, -0.0446],\n","        [ 0.0288,  0.0083,  0.0079,  ..., -0.0848, -0.0413,  0.0386],\n","        [ 0.0735,  0.0170,  0.0679,  ...,  0.0221,  0.0388,  0.0857]]), 'fc4.bias': tensor([-0.0598, -0.0089,  0.0092, -0.0173,  0.0419,  0.0839, -0.0123, -0.0273,\n","        -0.0273, -0.0475, -0.0546,  0.0982,  0.0940, -0.1093,  0.0471, -0.0166,\n","         0.0264,  0.0716,  0.0794,  0.0932, -0.0554,  0.0194, -0.0204, -0.0214,\n","         0.0985, -0.0029, -0.0299,  0.1094,  0.1201, -0.0313, -0.0014,  0.0119,\n","         0.0310,  0.0074, -0.0304,  0.0716,  0.0019,  0.1072, -0.0518,  0.0836,\n","         0.0367,  0.0798, -0.0198, -0.0471,  0.0572, -0.0321, -0.0187,  0.0534,\n","         0.0961,  0.0058, -0.0375,  0.0140,  0.0044, -0.0038, -0.0578,  0.0184,\n","         0.1534,  0.0419, -0.0953,  0.1133, -0.0354,  0.0028, -0.0088, -0.0836]), 'fc5.weight': tensor([[-0.0053, -0.0158,  0.0494,  ..., -0.1892, -0.0023,  0.0771],\n","        [-0.1060,  0.1247,  0.1147,  ...,  0.0411,  0.1206,  0.0055],\n","        [ 0.0352, -0.0415, -0.0928,  ..., -0.1336,  0.1018, -0.0955],\n","        ...,\n","        [ 0.1467, -0.0066,  0.0079,  ...,  0.1343,  0.0457, -0.0804],\n","        [ 0.1197,  0.1841,  0.0117,  ..., -0.0851, -0.0430,  0.0515],\n","        [-0.1166,  0.0042, -0.1057,  ..., -0.1000,  0.0468,  0.0284]]), 'fc5.bias': tensor([-0.0885, -0.0390,  0.0916, -0.0370,  0.1009,  0.0556,  0.0793,  0.0873,\n","         0.0528,  0.0763,  0.0350,  0.0211, -0.0192, -0.1216, -0.1094,  0.0805,\n","         0.0169, -0.0726,  0.0213,  0.0530, -0.1013, -0.0896,  0.0627, -0.0423,\n","        -0.0579, -0.1433,  0.0926, -0.0823, -0.0932,  0.1289, -0.0044, -0.1092]), 'fc6.weight': tensor([[ 0.0366, -0.0720, -0.1236, -0.0812,  0.0024, -0.0404,  0.1505, -0.0955,\n","          0.2171, -0.1871, -0.1750,  0.1165, -0.2369,  0.1505,  0.0720, -0.0852,\n","         -0.1447, -0.0421, -0.0669, -0.1769, -0.1755, -0.1338, -0.1066,  0.0922,\n","         -0.1157,  0.1451, -0.2053, -0.1524,  0.0657,  0.1403,  0.0581, -0.1778],\n","        [-0.2318, -0.1332,  0.0308,  0.0216,  0.0409, -0.0719, -0.0039,  0.2217,\n","         -0.1718,  0.0678, -0.0018, -0.0500,  0.0947, -0.0118,  0.1386, -0.0803,\n","         -0.0570, -0.1807,  0.2342,  0.0010, -0.1931,  0.1420, -0.0903, -0.1984,\n","         -0.1493, -0.0322,  0.2462,  0.0991, -0.0799, -0.2072,  0.0573,  0.0995],\n","        [-0.0809,  0.0055,  0.0329,  0.1634, -0.1052, -0.1451, -0.0756, -0.0294,\n","          0.1236,  0.0567, -0.2089, -0.0703, -0.0114,  0.1328, -0.0576,  0.1557,\n","         -0.2038,  0.1072, -0.0493,  0.0892,  0.0355, -0.0325, -0.0342,  0.0829,\n","          0.0084, -0.0149,  0.1300,  0.0215,  0.0082,  0.1719, -0.0485, -0.1026],\n","        [ 0.1747, -0.0899, -0.2280,  0.1112, -0.0503, -0.0388, -0.1129,  0.1852,\n","         -0.0050,  0.0386,  0.0530,  0.0324, -0.1200, -0.0566, -0.0438, -0.0807,\n","         -0.2595,  0.0216,  0.1453, -0.1095, -0.0886, -0.1424,  0.0461, -0.0176,\n","          0.0769,  0.0286, -0.1081, -0.0601, -0.0276, -0.0578,  0.0485, -0.1289],\n","        [-0.1446, -0.0038,  0.0076, -0.0615, -0.2135,  0.1810, -0.0589, -0.1444,\n","         -0.1727,  0.0946,  0.0544, -0.1667,  0.1211, -0.1350,  0.0749,  0.0205,\n","         -0.0709, -0.0092,  0.0438, -0.1176, -0.0573,  0.0293,  0.1626,  0.1672,\n","          0.1545,  0.0874, -0.1131, -0.0487,  0.1125,  0.0868,  0.0234, -0.0738],\n","        [ 0.1618, -0.0293, -0.0486,  0.0013, -0.1018, -0.1964, -0.0223, -0.0703,\n","          0.0489, -0.0491,  0.0938,  0.0753,  0.0844, -0.0916,  0.0981,  0.0639,\n","          0.1380,  0.0449, -0.0568,  0.1290,  0.0332,  0.0888, -0.0734, -0.0469,\n","          0.1543, -0.0310, -0.1298,  0.0235,  0.0258, -0.1805,  0.0915,  0.0564],\n","        [ 0.1082,  0.1754,  0.0273, -0.1889,  0.1705,  0.1507,  0.0747, -0.2008,\n","         -0.0038, -0.0105,  0.1095, -0.1184, -0.0491, -0.0387,  0.0640,  0.0998,\n","          0.0584, -0.1685, -0.0011,  0.0212,  0.1121,  0.0517, -0.2559, -0.1894,\n","          0.1538, -0.0088,  0.0649,  0.0341, -0.2555,  0.0679, -0.0373,  0.0106],\n","        [-0.0864,  0.0703, -0.1391,  0.1618, -0.2502, -0.1180,  0.1715,  0.0658,\n","          0.0217, -0.1198, -0.0117, -0.2261, -0.1666,  0.1125, -0.1378, -0.1425,\n","          0.1681, -0.2964,  0.2083,  0.1152,  0.0076, -0.0878,  0.1844,  0.1116,\n","          0.1595, -0.1618, -0.0600,  0.0886, -0.2288, -0.1143, -0.1640,  0.0597],\n","        [ 0.1166, -0.0212, -0.2080, -0.1133,  0.1593, -0.0065, -0.1555,  0.0263,\n","          0.0527, -0.1611, -0.1358,  0.0184,  0.0690,  0.1217,  0.1345, -0.1044,\n","          0.0448,  0.0163, -0.0448, -0.1482, -0.1820, -0.0098,  0.0896,  0.0816,\n","          0.1293,  0.1024,  0.1914, -0.0570, -0.0656, -0.1847, -0.1668,  0.1371],\n","        [-0.0785,  0.0423,  0.1292,  0.2153, -0.0717,  0.0577, -0.1786, -0.0351,\n","         -0.0585, -0.1803,  0.1647,  0.0856, -0.0086,  0.0172, -0.1300,  0.0541,\n","          0.0758, -0.1080, -0.1706, -0.2912, -0.0723, -0.0819,  0.0739,  0.1568,\n","          0.1144,  0.0963, -0.1366, -0.1542,  0.0997, -0.1912, -0.1272, -0.0628]]), 'fc6.bias': tensor([ 0.1433, -0.0994,  0.1359, -0.1359,  0.0970, -0.0512, -0.0894,  0.1160,\n","        -0.0830, -0.1210])}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gKfimwHbALjd","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}